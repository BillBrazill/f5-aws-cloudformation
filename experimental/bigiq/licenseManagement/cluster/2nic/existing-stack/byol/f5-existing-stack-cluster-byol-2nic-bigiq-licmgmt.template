{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Conditions": {
		"noCustomImageId": {
			"Fn::Equals": [
				"OPTIONAL",
				{
					"Ref": "customImageId"
				}
			]
		}
	},
	"Description": "Template v3.3.1: AWS CloudFormation Template for creating a cluster of 2NIC BIG-IQs in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
	"Mappings": {
		"regionMap": {
			"ap-northeast-1": {
			  "Best": "ami-0333dd63ae0b1112a"
			},
			"ap-northeast-2": {
			  "Best": "ami-0edeb70b0aaf278a6"
			},
			"ap-south-1": {
			  "Best": "ami-0b9201eb7648bb07d"
			},
			"ap-southeast-1": {
			  "Best": "ami-08a3a55743fb2fd5d"
			},
			"ap-southeast-2": {
			  "Best": "ami-094d47e7fedebb201"
			},
			"ca-central-1": {
			  "Best": "ami-8d27aae9"
			},
			"eu-central-1": {
			  "Best": "ami-04622a8db3ae94f89"
			},
			"eu-west-1": {
			  "Best": "ami-0f3b2ffeb3c4ff43c"
			},
			"eu-west-2": {
			  "Best": "ami-61ae5a06"
			},
			"sa-east-1": {
			  "Best": "ami-08d385bd2cbe52df6"
			},
			"us-east-1": {
			  "Best": "ami-075f269e21d926462"
			},
			"us-east-2": {
			  "Best": "ami-076b40df0c056a3da"
			},
			"us-west-1": {
			  "Best": "ami-0b69901ceb507a45b"
			},
			"us-west-2": {
			  "Best": "ami-7f416207"
			},
			"us-gov-west-1": {
			  "Best": "ami-74d64915"
			}

		}
	},
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "NETWORKING CONFIGURATION"
					},
					"Parameters": [
						"Vpc",
						"managementSubnetAz1",
						"managementSubnetAz2",
						"subnet1Az1",
						"subnet1Az2"
					]
				},
				{
					"Label": {
						"default": "INSTANCE CONFIGURATION"
					},
					"Parameters": [
						"customImageId",
						"instanceType",
						"licenseKey1",
						"licenseKey2",
						"licensePoolKeys",
						"regPoolKeys",
						"bigIqPasswordS3Arn",
						"sshKey",
						"restrictedSrcAddress",
						"restrictedSrcAddressApp",
						"ntpServer",
						"timezone"
					]
				},
				{
					"Label": {
						"default": "TAGS"
					},
					"Parameters": [
						"application",
						"environment",
						"group",
						"owner",
						"costcenter"
					]
				},
				{

				},
				{
					"Label": {
						"default": "TEMPLATE ANALYTICS"
					},
					"Parameters": [
						"allowUsageAnalytics"
					]
				}
			],
			"ParameterLabels": {
				"Vpc": {
					"default": "VPC"
				},
				"allowUsageAnalytics": {
					"default": "Send Anonymous Statistics to F5"
				},
				"application": {
					"default": "Application"
				},
				"costcenter": {
					"default": "Cost Center"
				},
				"customImageId": {
					"default": "Custom Image Id"
				},
				"environment": {
					"default": "Environment"
				},
				"group": {
					"default": "Group"
				},
				"instanceType": {
					"default": "AWS Instance Size"
				},
				"licenseKey1": {
					"default": "BIG-IQ License Key 1"
				},
				"licenseKey2": {
					"default": "BIG-IQ License Key 2"
				},
				"bigIqPasswordS3Arn": {
					"default": "S3 ARN of the BIG-IQ Password File"
				},
				"licensePoolKeys": {
					"default": "BIG-IP License Pool"
				},
				"regPoolKeys": {
					"default": "BIG-IP Reg Key Pool"
				},
				"managementSubnetAz1": {
					"default": "Management Subnet AZ1"
				},
				"managementSubnetAz2": {
					"default": "Management Subnet AZ2"
				},
				"ntpServer": {
					"default": "NTP Server"
				},
				"owner": {
					"default": "Owner"
				},
				"restrictedSrcAddress": {
					"default": "Source Address(es) for Management Access"
				},
				"restrictedSrcAddressApp": {
					"default": "Source Address(es) for internal Management Access"
				},
				"sshKey": {
					"default": "SSH Key"
				},
				"subnet1Az1": {
					"default": "Subnet1 in AZ1"
				},
				"subnet1Az2": {
					"default": "Subnet1 in AZ2"
				},
				"timezone": {
					"default": "Timezone (Olson)"
				}
			}
		},
		"Version": "3.3.0-r12s2"
	},
	"Outputs": {
		"device1InternalInterfacePrivateIp": {
			"Description": "Internally routable IP of the public interface on the instance",
			"Value": {
				"Fn::GetAtt": [
					"device1subnet1Az1Interface",
					"PrimaryPrivateIpAddress"
				]
			}
		},
		"device1InstanceId": {
			"Description": "Instance Id of BIG-IQ in AWS",
			"Value": {
				"Ref": "device1Instance"
			}
		},
		"device1ManagementEipAddress": {
			"Description": "IP address of the management port on the instance",
			"Value": {
				"Ref": "device1ManagementEipAddress"
			}
		},
		"device1ManagementInterface": {
			"Description": "Management interface ID on the instance",
			"Value": {
				"Ref": "device1ManagementInterface"
			}
		},
		"device1ManagementInterfacePrivateIp": {
			"Description": "Internally routable IP of the management interface on the instance",
			"Value": {
				"Fn::GetAtt": [
					"device1ManagementInterface",
					"PrimaryPrivateIpAddress"
				]
			}
		},
		"device1Url": {
			"Description": "Management GUI",
			"Value": {
				"Fn::Join": [
					"", [
						"https://",
						{
							"Fn::GetAtt": [
								"device1Instance",
								"PublicIp"
							]
						}
					]
				]
			}
		},
		"device1VipEipAddress": {
			"Description": "EIP address for VIP",
			"Value": {
				"Fn::Join": [
					"",
					[
						"http://",
						{
							"Ref": "device1VipEipAddress"
						},
						":80"
					]
				]
			}
		},
		"device1VipPrivateIp": {
			"Description": "VIP on External Interface Secondary IP 1",
			"Value": {
				"Fn::Select": [
					"0",
					{
						"Fn::GetAtt": [
							"device1subnet1Az1Interface",
							"SecondaryPrivateIpAddresses"
						]
					}
				]
			}
		},
		"device1subnet1Az1Interface": {
			"Description": "Internal interface Id on the device",
			"Value": {
				"Ref": "device1subnet1Az1Interface"
			}
		},
        "device2InternalInterfacePrivateIp": {
			"Description": "Internally routable IP of the public interface on the instance",
			"Value": {
				"Fn::GetAtt": [
					"device2subnet1Az2Interface",
					"PrimaryPrivateIpAddress"
				]
			}
		},
		"device2InstanceId": {
			"Description": "Instance Id of BIG-IQ in AWS",
			"Value": {
				"Ref": "device2Instance"
			}
		},
		"device2ManagementEipAddress": {
			"Description": "IP address of the management port on the device",
			"Value": {
				"Ref": "device2ManagementEipAddress"
			}
		},
		"device2ManagementInterface": {
			"Description": "Management interface ID on the device",
			"Value": {
				"Ref": "device2ManagementInterface"
			}
		},
		"device2ManagementInterfacePrivateIp": {
			"Description": "Internally routable IP of the management interface on BIG-IQ",
			"Value": {
				"Fn::GetAtt": [
					"device2ManagementInterface",
					"PrimaryPrivateIpAddress"
				]
			}
		},
		"device2Url": {
			"Description": "BIG-IP Management GUI",
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Fn::GetAtt": [
								"device2Instance",
								"PublicIp"
							]
						}
					]
				]
			}
		},
		"device2subnet1Az2Interface": {
			"Description": "External interface Id on BIG-IQ",
			"Value": {
				"Ref": "device2subnet1Az2Interface"
			}
		},
        "availabilityZone1": {
			"Description": "Availability Zone",
			"Value": {
				"Fn::GetAtt": [
					"device1Instance",
					"AvailabilityZone"
				]
			}
		},
		"availabilityZone2": {
			"Description": "Availability Zone",
			"Value": {
				"Fn::GetAtt": [
					"device2Instance",
					"AvailabilityZone"
				]
			}
		},
		"deviceSubnet1SecurityGroup": {
			"Description": "Internal Security Group",
			"Value": {
				"Ref": "deviceSubnet1SecurityGroup"
			}
		},
		"deviceManagementSecurityGroup": {
			"Description": "Management Security Group",
			"Value": {
				"Ref": "deviceManagementSecurityGroup"
			}
		}
	},
	"Parameters": {
		"Vpc": {
			"ConstraintDescription": "This must be an existing VPC within the working region.",
			"Type": "AWS::EC2::VPC::Id"
		},
		"allowUsageAnalytics": {
			"AllowedValues": [
				"Yes",
				"No"
			],
			"Default": "Yes",
			"Description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
			"Type": "String"
		},
		"application": {
			"Default": "f5app",
			"Description": "Name of the Application Tag",
			"Type": "String"
		},
		"costcenter": {
			"Default": "f5costcenter",
			"Description": "Name of the Cost Center Tag",
			"Type": "String"
		},
		"customImageId": {
			"ConstraintDescription": "Must be a valid AMI Id",
			"Default": "OPTIONAL",
			"Description": "If you would like to deploy using a custom image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
			"MaxLength": 255,
			"MinLength": 1,
			"Type": "String"
		},
		"environment": {
			"Default": "f5env",
			"Description": "Name of the Environment Tag",
			"Type": "String"
		},
		"group": {
			"Default": "f5group",
			"Description": "Name of the Group Tag",
			"Type": "String"
		},
		"instanceType": {
			"AllowedValues": [
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge"
			],
			"ConstraintDescription": "Must be a valid EC2 instance type for the instance",
			"Default": "m4.2xlarge",
			"Description": "Size of the F5 Instance",
			"Type": "String"
		},
		"licenseKey1": {
			"AllowedPattern": "([a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9})",
			"ConstraintDescription": "Verify your F5 BYOL registration key.",
			"Description": "F5 BIG-IQ license manager registration key",
			"MaxLength": "255",
			"MinLength": "1",
			"Type": "String"
		},
		"licenseKey2": {
			"AllowedPattern": "([a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9}-[a-zA-Z0-9]{3,9})",
			"ConstraintDescription": "Verify your F5 BYOL registration key.",
			"Description": "F5 BIG-IQ license manager registration key",
			"MaxLength": "255",
			"MinLength": "1",
			"Type": "String"
		},
		"licensePoolKeys": {
			"ConstraintDescription": "Verify your F5 BIG-IQ BIG-IP pool registration key.",
			"Description": "Enter a pool name and registration key using the format of name:key. Leave Do_Not_Create if you do not want to create a licensing pool on BIG-IQ at this time.",
			"MaxLength": "255",
			"MinLength": "1",
			"Type": "String",
			"Default": "Do_Not_Create"
		},
		"regPoolKeys": {
			"ConstraintDescription": "Verify your F5 BIG-IQ pool BIG-IP registration keys.",
			"Description": "Enter a pool name and a list of individual BIG-IP registration keys in the format of name:key,key,key. Leave Do_Not_Create if you do not want to create a reg key pool on BIG-IQ at this time.",
			"MaxLength": "255",
			"MinLength": "1",
			"Type": "String",
			"Default": "Do_Not_Create"
		},
		"managementSubnetAz1": {
			"ConstraintDescription": "The subnet ID must be within an existing VPC",
			"Description": "Management Subnet ID",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"managementSubnetAz2": {
			"ConstraintDescription": "The subnet ID must be within an existing VPC",
			"Description": "Management Subnet ID",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"ntpServer": {
			"Default": "0.pool.ntp.org",
			"Description": "NTP server for this implementation",
			"Type": "String"
		},
		"owner": {
			"Default": "f5owner",
			"Description": "Name of the Owner Tag",
			"Type": "String"
		},
		"restrictedSrcAddress": {
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
			"Description": " The IP address range used to SSH and access management GUI on the EC2 instances",
			"MaxLength": "18",
			"MinLength": "9",
			"Type": "String"
		},
		"restrictedSrcAddressApp": {
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
			"Description": " The IP address range that can be used to access BIG-IQ on the specified internal network via port 443.",
			"MaxLength": "18",
			"MinLength": "9",
			"Type": "String"
		   },
		"sshKey": {
			"Description": "EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"subnet1Az1": {
			"ConstraintDescription": "The subnet ID must be within an existing VPC",
			"Description": "Private or Internal subnet",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"subnet1Az2": {
			"ConstraintDescription": "The subnet ID must be within an existing VPC",
			"Description": "Private or Internal subnet",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"timezone": {
			"Default": "UTC",
			"Description": "Olson timezone string from /usr/share/zoneinfo",
			"Type": "String"
		},
		"bigIqPasswordS3Arn": {
			"ConstraintDescription": "Verify the S3 ARN of BIG-IQ Password file",
			"Description": "S3 ARN of the BIG-IQ Password file. e.g. arn:aws:s3:::bucket_name/full_path_to_file for public regions. For GovCloud (US) region, start with arn:aws-us-gov:s3. For China region, start with arn:aws-cn:s3.",
			"MaxLength": "255",
			"MinLength": "1",
			"Type": "String"
		}
	},
	"Resources": {
		"device1Instance": {
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"commands": {
							"init": {
								"command": {
									"Fn::Join": [
										"", [
											"mkdir -p /var/log/cloud/aws;cat /config/cloud/initEncoded | /usr/bin/base64 -d > /config/cloud/init.sh && chmod +x /config/cloud/init.sh;",
											"/config/cloud/init.sh --cloud aws --skip-verify --log-level debug --data-interface eth1 --license ",
											{
												"Ref": "licenseKey1"
											},
											" --ntp ",
											{
												"Ref": "ntpServer"
											},
											" --timezone ",
											{
												"Ref": "timezone"
											},
											" --create-license-pool ",
											{
												"Ref": "licensePoolKeys"
											},
											" --create-reg-key-pool ",
											{
												"Ref": "regPoolKeys"
											},
											" --big-iq-password-data-uri ",
											{
												"Ref": "bigIqPasswordS3Arn"
											},
											" --fcl-tag v4.6.0",
											" --fcl-cloud-tag v2.4.0",
											" --vlan 'n:internal,nic:1.1' ",
											" --self-ip 'n:internal_self,a:",
											{
												"Fn::GetAtt": [
													"device1subnet1Az1Interface",
													"PrimaryPrivateIpAddress"
												]
											},
											",i:eth1',v:internal --discovery-address ",
											{
												"Fn::GetAtt": [
													"device1subnet1Az1Interface",
													"PrimaryPrivateIpAddress"
												]
											},
                                            " --master --big-iq-failover-peer-ip ",
											{
												"Fn::GetAtt": [
                                                    "device2subnet1Az2Interface",
													"PrimaryPrivateIpAddress"
												]
											},
											" --tag-value ",
											{
												"Ref": "AWS::StackId"
											},
											" --vip-allocation-id ",
											{
												"Fn::GetAtt": [
													"device1VipEipAddress",
													"AllocationId"
												]
											},
											" --private-ip ",
											{
												"Fn::Select": [
													"0",
													{
														"Fn::GetAtt": [
															"device1subnet1Az1Interface",
															"SecondaryPrivateIpAddresses"
														]
													}
												]
											},
											" --associate-eni ",
											{
												"Ref": "device1subnet1Az1Interface"
											},
											" --usage-analytics 'send:",
											{
												"Ref": "allowUsageAnalytics"
											},
											",r:",
											{
												"Ref": "AWS::Region"
											},
											",cI:",
											{
												"Ref": "AWS::AccountId"
											},
											",dI:",
											{
												"Ref": "AWS::StackId"
											},
											",cN:aws,lT:byol,bIV:6.0.0,tN:f5-existing-stack-byol-2nic-bigiq,tV:4.3.0' ",
											"&>> /var/log/cloud/aws/install.log &"
										]
									]
								}
							}
						},
						"files": {
							"/config/cloud/initEncoded": {
								"group": "root",
								"mode": "000400",
								"owner": "root",
								"content": {
									"Fn::Join": [
										"", [
											"IyEvYmluL2Jhc2gKCiMjIyBDb25maWd1cmUgZGVmYXVsdCB2YWx1ZXMKbG9nX2xldmVsPSJpbmZvIgpoZWxwPWZhbHNlCnNraXBfdmVyaWZ5PWZhbHNlCnNjcmlwdF9kaXI9JChkaXJuYW1lICQwKQoKVE1TSD0vdXNyL2Jpbi90bXNoCkNVUkw9L3Vzci9iaW4vY3VybApOT0RFPS91c3IvYmluL25vZGUKCiMjIyBGdW5jdGlvbnMgLSBUaGVzZSBzaG91bGQgZ28gaW50byBzZXBlcmF0ZSBmaWxlKHMpCiMgdXNhZ2U6IGxvZyBtZXNzYWdlCmZ1bmN0aW9uIGxvZygpIHsKICAgIGVjaG8gIiQoZGF0ZSAnKyVZLSVtLSVkVCVIOiVNOiVTWicpOiAkMSIKfQojIHVzYWdlOiBnZXRfdmVyc2lvbgpmdW5jdGlvbiBnZXRfdmVyc2lvbigpIHsKICAgIHJldD0kKCRUTVNIIHNob3cgc3lzIHZlcnNpb24gfCBncmVwIC1pIHByb2R1Y3QgfCBhd2sgJ3twcmludCAkMn0nKQogICAgZWNobyAke3JldCwsfQp9CiMgdXNhZ2U6IGpzb25pZnkga2V5OnZhbHVlLGtleTE6dmFsdWUxCmZ1bmN0aW9uIGpzb25pZnkoKSB7CiAgICBsaXN0PSQoZWNobyAkMSB8IHRyICcsJyAnICcpCiAgICBqc29uPSd7fScKICAgIGZvciBpIGluICRsaXN0IDsgZG8KICAgICAgICBrdj0oJChlY2hvICRpIHwgdHIgJzonICcgJykpCiAgICAgICAganNvbj0kKGVjaG8gJGpzb24gfCBqcSAtLWFyZyBrICR7a3ZbMF19IC0tYXJnIHYgJHtrdlsxXX0gJy4gfCAuWyRrXT0kdicpCiAgICBkb25lCiAgICBlY2hvICRqc29uCn0KIyB1c2FnZTogZ2V0X3ZhbCBqc29uX29iamVjdCBrZXkKZnVuY3Rpb24gZ2V0X3ZhbCgpIHsKICAgIHJldD0kKGVjaG8gJDEgfCBqcSAuJDIgLXIpCiAgICBlY2hvICRyZXQKfQojIHVzYWdlOiBtYWtlIHN1cmUgdGhlcmUgaXMgaW50ZXJuZXQgY29ubmVjdGlvbiB0byBHaXRIdWIKZnVuY3Rpb24gY2hlY2tfaW50ZXJuZXRfY29ubmVjdGlvbiB7CiAgICBlY2hvICItLS0gQ2hlY2tpbmcgR2l0aHViIHN0YXR1cyAtLS0iCiAgICBjaGVja3M9MAogICAgZ2l0aHViX3Jlc3BvbnNlPSJiYWQiCiAgICB3aGlsZSBbICRjaGVja3MgLWx0IDEyMCBdIDsgZG8KICAgICAgICBnaXRodWJfcmVzcG9uc2U9YGN1cmwgaHR0cHM6Ly9zdGF0dXMuZ2l0aHViLmNvbS9hcGkvc3RhdHVzLmpzb24/Y2FsbGJhY2stYXBpU3RhdHVzIHwganEgLnN0YXR1cyAtLXJhdy1vdXRwdXRgCiAgICAgICAgaWYgWyAkZ2l0aHViX3Jlc3BvbnNlID09ICJnb29kIiBdOyB0aGVuCiAgICAgICAgICAgIGxvZyAiR2l0SHViIGlzIHJlYWR5IgogICAgICAgICAgICBicmVhawogICAgICAgIGZpCiAgICAgICAgbG9nICJHaXRIdWIgbm90IHJlYWR5OiAkY2hlY2tzIgogICAgICAgIGxldCBjaGVja3M9Y2hlY2tzKzEKICAgICAgICBzbGVlcCA1CiAgICBkb25lCiAgICBpZiBbICRnaXRodWJfcmVzcG9uc2UgPT0gImJhZCIgXTsgdGhlbgogICAgICAgIGxvZyAiTm8gR2l0SHViIGludGVybmV0IGNvbm5lY3Rpb24uIgogICAgICAgIGV4aXQKICAgIGZpCn0KIyB1c2FnZTogbWNwX3J1bm5pbmcKZnVuY3Rpb24gbWNwX3J1bm5pbmcgewogICAgY2hlY2tzPTAKICAgIHdoaWxlIFsgJGNoZWNrcyAtbHQgMTIwIF0gOyBkbwogICAgICAgICRUTVNIIC1hIHNob3cgc3lzIG1jcC1zdGF0ZSBmaWVsZC1mbXQgfCBncmVwIC1xIHJ1bm5pbmcKICAgICAgICBpZiBbICQ/ID09IDAgXTsgdGhlbgogICAgICAgICAgICBsb2cgIk1DUEQgcmVhZHkiCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKICAgICAgICBsb2cgIk1DUEQgbm90IHJlYWR5OiAkY2hlY2tzIgogICAgICAgIGxldCBjaGVja3M9Y2hlY2tzKzEKICAgICAgICBzbGVlcCA1CiAgICBkb25lCn0KIyB1c2FnZTogRG93bmxvYWQgZnJvbSBHaXRodWIgdW50aWwgc3VjY2Vzc2Z1bAojCiMgJDE6IG91dHB1dCBmaWxlIG5hbWUKIyAkMjogVVJMCmZ1bmN0aW9uIHNhZmVfZG93bmxvYWQgewogICAgY2hlY2tzPTAKICAgIHdoaWxlIFsgJGNoZWNrcyAtbHQgMTIwIF0gOyBkbwogICAgICAgICRDVVJMIC0tZmFpbCAtLXJldHJ5IDIwIC0tcmV0cnktZGVsYXkgNSAtLXJldHJ5LW1heC10aW1lIDI0MCAtbyAkMSAkMiAmJiBicmVhawogICAgICAgIGxldCBjaGVja3M9Y2hlY2tzKzEKICAgICAgICBzbGVlcCA1CiAgICBkb25lCn0KIyB1c2FnZTogYmFzZV9jb25maWdfYXZhaWxhYmxlIC0gcmVzb2x2ZXMgaXNzdWUgZm91bmQgaW4gNi4wLjAgdmVyc2lvbnMgb2YgYmlnLWlxCmZ1bmN0aW9uIGJhc2VfY29uZmlnX2F2YWlsYWJsZSB7CiAgICBjaGVja3M9MAogICAgd2hpbGUgWyAkY2hlY2tzIC1sdCAxMjAgXSA7IGRvCiAgICAgICAgJFRNU0ggLWEgc2hvdyBzeXMgbWNwLXN0YXRlIGZpZWxkLWZtdCB8IGdyZXAgLXEgcnVubmluZwogICAgICAgIGlmIFsgLWYgL2NvbmZpZy9iaWdpcF9iYXNlLmNvbmYgXTsgdGhlbgogICAgICAgICAgICBsb2cgIkJhc2UgQ29uZmlnIGZpbGUgcHJlc2VudDsgc2F2aW5nIGNvbmZpZyIKICAgICAgICAgICAgdG1zaCBzYXZlIHN5cyBjb25maWcKICAgICAgICAgICAgY2F0IC9jb25maWcvYmlnaXBfYmFzZS5jb25mCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmkKICAgICAgICBsb2cgIkJhc2UgY29uZmlnIGZpbGUgbm90IHlldCBwcmVzZW50OiAkY2hlY2tzIgogICAgICAgIGxldCBjaGVja3M9Y2hlY2tzKzEKICAgICAgICBzbGVlcCA1CiAgICBkb25lCn0KIyB1c2FnZTogZ2V0X25ldF9pbmZvIGV0aDAgbnN8Z3cgaW5jbHVkZV9jaWRyCmZ1bmN0aW9uIGdldF9uZXRfaW5mbygpIHsKICAgIFJFVD0iIgogICAgQ0lEUl9CTE9DSz0iIgogICAgaWYgW1sgJGNsb3VkID09ICJhenVyZSIgXV07IHRoZW4KICAgICAgICBhZGRfaW50PTEKICAgICAgICBJRl9NQUM9JChpZmNvbmZpZyAkMSB8IGdyZXAgLWkgaHdhZGRyIHwgYXdrICd7cHJpbnQgJDV9JyB8IHNlZCAncy86Ly9nJykKICAgICAgICBJRl9JTkZPPSQoY3VybCAtc2YgLS1yZXRyeSAyMCBjdXJsIC1IIE1ldGFkYXRhOnRydWUgImh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbWV0YWRhdGEvaW5zdGFuY2UvbmV0d29yay9pbnRlcmZhY2U/YXBpLXZlcnNpb249MjAxNy0wOC0wMSIgfCBqcSAnLltdIHwgc2VsZWN0KC5tYWNBZGRyZXNzPT0iJyR7SUZfTUFDfSciKScpCiAgICAgICAgQ0lEUl9CTE9DSz0kKGVjaG8gJHtJRl9JTkZPfSB8IGpxIC5pcHY0LnN1Ym5ldFswXS5hZGRyZXNzIC0tcmF3LW91dHB1dCkKICAgICAgICBDSURSX0JMT0NLKz0iLyIKICAgICAgICBDSURSX0JMT0NLKz0kKGVjaG8gJHtJRl9JTkZPfSB8IGpxIC5pcHY0LnN1Ym5ldFswXS5wcmVmaXggLS1yYXctb3V0cHV0KQogICAgZWxpZiBbWyAkY2xvdWQgPT0gImF3cyIgXV07IHRoZW4KICAgICAgICBjaWRyX2Jsb2NrX3VyaT0idnBjLWlwdjQtY2lkci1ibG9jayIKICAgICAgICBhZGRfaW50PTIKICAgICAgICAjIElmIGdldHRpbmcgZ2F0ZXdheSwgdXBkYXRlIG5lY2Vzc2FyeSB2YXJzCiAgICAgICAgaWYgW1sgJDIgPT0gImd3IiBdXSA7IHRoZW4gY2lkcl9ibG9ja191cmk9InN1Ym5ldC1pcHY0LWNpZHItYmxvY2siIDsgYWRkX2ludD0xIDsgZmkKICAgICAgICBJRl9NQUM9JChpZmNvbmZpZyAkMSB8IGdyZXAgLWkgaHdhZGRyIHwgYXdrICd7cHJpbnQgdG9sb3dlcigkNSl9JykKICAgICAgICBDSURSX0JMT0NLPSQoY3VybCAtc2YgLS1yZXRyeSAyMCBodHRwOi8vMTY5LjI1NC4xNjkuMjU0L2xhdGVzdC9tZXRhLWRhdGEvbmV0d29yay9pbnRlcmZhY2VzL21hY3MvJHtJRl9NQUN9LyR7Y2lkcl9ibG9ja191cml9KQogICAgZmkKICAgIFJFVD0kKGVjaG8gJHtDSURSX0JMT0NLJS8qfSB8IGF3ayAtRi4gJ3sgcHJpbnRmICIlZC4lZC4lZC4lZCIsICQxLCAkMiwgJDMsICQ0Kycke2FkZF9pbnR9JyB9JykKICAgICMgSW5jbHVkZSBtYXNrIGluIHJlc3BvbnNlIGlmIHJlcXVlc3RlZAogICAgaWYgW1sgLW4gIiQzIiBdXSA7IHRoZW4gZWNobyAke1JFVH0vJHtDSURSX0JMT0NLIyovfSA7IGVsc2UgZWNobyAkUkVUIDsgZmkKfQoKcmVhZCAtciAtZCAnJyBVU0FHRSA8PCBFT00KICAgIFVzYWdlOiAkMAogICAgICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICBQcmludCB1c2FnZSBtZXNzYWdlIGFuZCBleGl0CiAgICAgICAgLS1sb2ctbGV2ZWwgPHN0cmluZz4gICAgICAgIExldmVsIG9mIGxvZ2dpbmcgZGVzaXJlZDogZXJyb3IsIHdhcm4sIGluZm8sIGRlYnVnCiAgICAgICAgLS1jbG91ZCA8c3RyaW5nPiAgICAgICAgICAgIENsb3VkIGVudmlyb25tZW50IGV4ZWN1dGVkIGFnYWluc3Q6IGF3cwogICAgICAgIC0tc2tpcC12ZXJpZnkgPHN0cmluZz4gICAgICBTa2lwIHZlcmlmaWNhdGlvbiBvZiBkZXBlbmRlbmNpZXMKICAgICAgICAtLWxpY2Vuc2UgPHN0cmluZz4gICAgICAgICAgTGljZW5zZSBmb3IgdGhlIGRldmljZQogICAgICAgIC0tbnRwIDxzdHJpbmc+ICAgICAgICAgICAgICBOVFAgZm9yIHRoZSBkZXZpY2UKICAgICAgICAtLXRpbWV6b25lIDxzdHJpbmc+ICAgICAgICAgVGltZXpvbmUgZm9yIHRoZSBkZXZpY2UKICAgICAgICAtLWRhdGEtaW50ZXJmYWNlIDxzdHJpbmc+ICAgUHJpbWFyeSBpbnRlcmZhY2UgdG8gdXNlIGZvciBkYXRhLXBsYW5lCiAgICAgICAgLS12bGFuIDxzdHJpbmc+ICAgICAgICAgICAgIFZMQU4ocykgdG8gY3JlYXRlIG9uIHRoZSBkZXZpY2UgKDsgZm9yIG11bHRpcGxlKSAnbjpleHQsbmljOjEuMScKICAgICAgICAtLXNlbGYtaXAgPHN0cmluZz4gICAgICAgICAgU2VsZiBJUChzKSB0byBjcmVhdGUgb24gdGhlIGRldmljZSAoOyBmb3IgbXVsdGlwbGUpOiAnbjpleHQsYTp4LngueC54LHY6ZXh0LGk6ZXRoMScKICAgICAgICAtLXVzYWdlLWFuYWx5dGljcyA8c3RyaW5nPiAgVXNhZ2UgYW5hbHl0aWNzIHRvIHNlbmQ6ICdjTjp2YWwscjp2YWwsY0k6dmFsLGRJOnZhbCxsVDp2YWwsYklWOnZhbCx0Tjp2YWwsdFY6dmFsLHNlbmQ6eWVzJwogICAgICAgIC0tY3JlYXRlLWxpY2Vuc2UtcG9vbCAgICAgICBDcmVhdGVzIGxpY2Vuc2UgcG9vbCwgc2VuZDogbmFtZTpyZWdfa2V5CiAgICAgICAgLS1jcmVhdGUtcmVnLWtleS1wb29sICAgICAgIENyZWF0ZXMgYSByZWdrZXkgcG9vbCwgc2VuZDogbmFtZTpyZWdfa2V5X2xpc3QKICAgICAgICAtLWZjbC10YWcgICAgICAgICAgICAgICAgICAgRjUgY2xvdWQgbGliIHRhZyB0byBkb3dubG9hZCBmNS1jbG91ZC1saWJzLnRhci5negogICAgICAgIC0tZmNsLWNsb3VkLXRhZyAgICAgICAgICAgICBGNSBzcGVjaWZpZWQgY2xvdWQgdGFnIHRvIGRvd25sb2FkIGY1LWNsb3VkLWxpYnMtPGNsb3VkPi50YXIuZ3oKICAgICAgICAtLWJpZy1pcS1wYXNzd29yZC1kYXRhLXVyaSAgVVJJIHRvIHRoZSBsb2NhdGlvbiB0aGF0IGNvbnRhaW5zIEJJRy1JUSBhZG1pbiB1c2VyIHBhc3N3b3JkCiAgICAgICAgLS1tYXN0ZXIgICAgICAgICAgICAgICAgICAgIEluZGljYXRlcyB0aGF0IHRoaXMgaW5zdGFuY2UgaXMgbWFzdGVyICh1c2VkIGluIEJJRy1JUSBjbHVzdGVyaW5nKSB1c2Ugd2l0aCAtLWJpZy1pcS1mYWlsb3Zlci1wZWVyLWlwIG9wdGlvbgogICAgICAgIC0tYmlnLWlxLWZhaWxvdmVyLXBlZXItaXAgICBUaGlzIGlzIHRoZSBwcml2YXRlIElQIGFkZHJlc3MgZm9yIHRoZSBzZWNvbmRhcnkgQklHLUlRCiAgICAgICAgLS10YWctdmFsdWUgICAgICAgICAgICAgICAgIFRoZSB0YWcgdmFsdWUgdG8gYWRkIHRvIHRoZSBFbGFzdGljIHZpcnR1YWwgSVAgYWRkcmVzcwogICAgICAgIC0tdmlwLWFsbG9jYXRpb24taWQgICAgICAgICBBbGxvY2F0aW9uIElEIG9mIHRoZSBFbGFzdGljIHZpcnR1YWwgSVAgYWRkcmVzcwogICAgICAgIC0tcHJpdmF0ZS1pcCAgICAgICAgICAgICAgICBQcml2YXRlIElQIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBFbGFzdGljIHZpcnR1YWwgSVAgYWRkcmVzcwogICAgICAgIC0tYXNzb2NpYXRlLWVuaSAgICAgICAgICAgICBFTkkgb2YgdGhlIG5ldHdvcmsgaW50ZXJmYWNlIHRvIGFzc29jaWF0ZSB0aGUgRWxhc3RpYyB2aXJ0dWFsIElQIGFkZHJlc3Mgd2l0aAoKRU9NCgojIyMgUGFyc2UgY29tbWFuZCBsaW5lIGFyZ3VtZW50cwp3aGlsZSBbWyAkIyAtZ3QgMCBdXSA7IGRvCiAgICBjYXNlICIkMSIgaW4KICAgICAgICAtLWhlbHApCiAgICAgICAgICAgIGhlbHA9dHJ1ZQogICAgICAgICAgICBzaGlmdCA7OwogICAgICAgIC0tbG9nLWxldmVsKQogICAgICAgICAgICBsb2dfbGV2ZWw9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1jbG91ZCkKICAgICAgICAgICAgY2xvdWQ9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1za2lwLXZlcmlmeSkKICAgICAgICAgICAgc2tpcF92ZXJpZnk9dHJ1ZQogICAgICAgICAgICBzaGlmdCA7OwogICAgICAgIC0tbGljZW5zZSkKICAgICAgICAgICAgbGljZW5zZT0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLW50cCkKICAgICAgICAgICAgbnRwPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tdGltZXpvbmUpCiAgICAgICAgICAgIHRpbWV6b25lPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tZGF0YS1pbnRlcmZhY2UpCiAgICAgICAgICAgIGRhdGFfaW50ZXJmYWNlPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tdXNhZ2UtYW5hbHl0aWNzKQogICAgICAgICAgICB1c2FnZV9hbmFseXRpY3M9IiQyIgogICAgICAgICAgICBzaGlmdCA7OwogICAgICAgIC0tdmxhbikKICAgICAgICAgICAgdmxhbj0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLXNlbGYtaXApCiAgICAgICAgICAgIHNlbGZfaXA9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1kaXNjb3ZlcnktYWRkcmVzcykKICAgICAgICAgICAgZGlzY292ZXJ5X2FkZHJlc3M9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1jcmVhdGUtbGljZW5zZS1wb29sKQogICAgICAgICAgICBsaWNlbnNlX3Bvb2w9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1jcmVhdGUtcmVnLWtleS1wb29sKQogICAgICAgICAgICByZWdfa2V5X3Bvb2w9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1mY2wtdGFnKQogICAgICAgICAgICBmY2xfdGFnPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgIC0tZmNsLWNsb3VkLXRhZykKICAgICAgICAgICAgZmNsX2Nsb3VkX3RhZz0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLWJpZy1pcS1wYXNzd29yZC1kYXRhLXVyaSkKICAgICAgICAgICAgcGFzc3dvcmRfZGF0YV91cmk9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1tYXN0ZXIpCiAgICAgICAgICAgIG1hc3Rlcj10cnVlCiAgICAgICAgICAgIHNoaWZ0IDs7CiAgICAgICAgLS1iaWctaXEtZmFpbG92ZXItcGVlci1pcCkKICAgICAgICAgICAgYmlnX2lxX2ZhaWxvdmVyX3BlZXJfaXA9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS10YWctdmFsdWUpCiAgICAgICAgICAgIHRhZ192YWx1ZT0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLXZpcC1hbGxvY2F0aW9uLWlkKQogICAgICAgICAgICB2aXBfYWxsb2NhdGlvbl9pZD0iJDIiCiAgICAgICAgICAgIHNoaWZ0IDIgOzsKICAgICAgICAtLXByaXZhdGUtaXApCiAgICAgICAgICAgIHByaXZhdGVfaXA9IiQyIgogICAgICAgICAgICBzaGlmdCAyIDs7CiAgICAgICAgLS1hc3NvY2lhdGUtZW5pKQogICAgICAgICAgICBhc3NvY2lhdGVfZW5pPSIkMiIKICAgICAgICAgICAgc2hpZnQgMiA7OwogICAgICAgICp8LS0pCiAgICAgICAgICAgIHNoaWZ0CiAgICAgICAgICAgIGJyZWFrIDs7CiAgICBlc2FjCmRvbmUKCmlmICRoZWxwIDsgdGhlbgogICAgZWNobyAiJFVTQUdFIgogICAgZXhpdApmaQoKIyBWZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVycwpyZXF1aXJlZD0oImNsb3VkIikKZm9yIGkgaW4gJHtyZXF1aXJlZFtAXX0gOyBkbwogICAgaWYgWyAteiAkeyFpfSBdIDsgdGhlbgogICAgICAgIGxvZyAiQSByZXF1aXJlZCBwYXJhbWV0ZXIgaXMgbWlzc2luZzogJGkiCiAgICAgICAgZXhpdAogICAgZmkKZG9uZQoKY29uZmlnX3BhcmFtcyA9ICItLWhlbHAgJGhlbHAgLS1sb2ctbGV2ZWwgJGxvZ19sZXZlbCAtLWNsb3VkICRjbG91ZCAtLXNraXAtdmVyaWZ5ICRza2lwX3ZlcmlmeSAtLWxpY2Vuc2UgJGxpY2Vuc2UgLS1udHAgJG50cCAtLXRpbWV6b25lICR0aW1lem9uZSAgLS1kYXRhLWludGVyZmFjZSAkZGF0YV9pbnRlcmZhY2UgLS11c2FnZS1hbmFseXRpY3MgJHVzYWdlX2FuYWx5dGljcyAtLXZsYW4gJHZsYW4gLS1zZWxmLWlwICRzZWxmX2lwIC0tZGlzY292ZXJ5LWFkZHJlc3MgJGRpc2NvdmVyeV9hZGRyZXNzIC0tY3JlYXRlLWxpY2Vuc2UtcG9vbCAkbGljZW5zZV9wb29sIC0tY3JlYXRlLXJlZy1rZXktcG9vbCAkcmVnX2tleV9wb29sIC0tZmNsLXRhZyAkZmNsX3RhZyAtLWZjbC1jbG91ZC10YWcgJGZjbF9jbG91ZF90YWcgLS1iaWctaXEtcGFzc3dvcmQtZGF0YS11cmkgJHBhc3N3b3JkX2RhdGFfdXJpIgoKaWYgWyAtbiAkbWFzdGVyIF0gOyB0aGVuCiAgICBjb25maWdfcGFyYW1zKz0gIiAtLW1hc3RlciAkbWFzdGVyICIKZmkKaWYgWyAtbiAkYmlnX2lxX2ZhaWxvdmVyX3BlZXJfaXAgXSA7IHRoZW4KICAgIGNvbmZpZ19wYXJhbXMrPSAiIC0tYmlnLWlxLWZhaWxvdmVyLXBlZXItaXAgJGJpZ19pcV9mYWlsb3Zlcl9wZWVyX2lwICIKZmkKCmVjaG8gIkNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyczogJGNvbmZpZ19wYXJhbXMiCgojIENoZWNrIGZvciAiRG8gTm90IENyZWF0ZSIgaW4gY3JlYXRlIHBvb2wgcGFybWV0ZXJzCnNob3B0IC1zIG5vY2FzZW1hdGNoCmlmIFtbICRsaWNlbnNlX3Bvb2wgPT0gIkRvX05vdF9DcmVhdGUiIF1dIDsgdGhlbgogICAgbG9nICJTZXR0aW5nIGxpY2Vuc2luZyBwb29sIHRvIG51bGwgYXMgJ0RvX05vdF9DcmVhdGUnIGhhcyBiZWVuIHNwZWNpZmllZDogJGxpY2Vuc2luZ19wb29sIgogICAgbGljZW5zZV9wb29sPSIiCmZpCmlmIFtbICRyZWdfa2V5X3Bvb2wgPT0gIkRvX05vdF9DcmVhdGUiIF1dIDsgdGhlbgogICAgbG9nICJTZXR0aW5nIHJlZyBrZXkgcG9vbCB0byBudWxsIGFzICdEb19Ob3RfQ3JlYXRlJyBoYXMgYmVlbiBzcGVjaWZpZWQ6ICRsaWNlbnNpbmdfcG9vbCIKICAgIHJlZ19rZXlfcG9vbD0iIgpmaQpzaG9wdCAtdSBub2Nhc2VtYXRjaAoKIyMjIEluc3RhbGwgZGVwZW5kZW5jaWVzICMjIwojIyBUaGVyZSBtdXN0IGJlIEdpdEh1YiBpbnRlcm5ldCBjb25uZWN0aW9uCmNoZWNrX2ludGVybmV0X2Nvbm5lY3Rpb24KCmJhc2VfdXJsPSJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRjVOZXR3b3JrcyIKYmFzZV9kaXI9Ii9jb25maWcvY2xvdWQiCmJhc2VfbG9nX2Rpcj0iL3Zhci9sb2cvY2xvdWQvJHtjbG91ZH0iCmJhc2VfZGVwZW5kZW5jeV9kaXI9IiR7YmFzZV9kaXJ9LyR7Y2xvdWR9L25vZGVfbW9kdWxlcy9AZjVkZXZjZW50cmFsIgoKIyMgRG93bmxvYWQKZGVwZW5kZW5jaWVzPSgiJHtiYXNlX3VybH0vZjUtY2xvdWQtbGlicy8ke2ZjbF90YWd9L2Rpc3QvZjUtY2xvdWQtbGlicy50YXIuZ3oiKQpkZXBlbmRlbmNpZXMrPSgiJHtiYXNlX3VybH0vZjUtY2xvdWQtbGlicy0ke2Nsb3VkfS8ke2ZjbF9jbG91ZF90YWd9L2Rpc3QvZjUtY2xvdWQtbGlicy0ke2Nsb3VkfS50YXIuZ3oiKQpkZXBlbmRlbmNpZXMrPSgiJHtiYXNlX3VybH0vZjUtY2xvdWQtbGlicy8ke2ZjbF90YWd9L2Rpc3QvdmVyaWZ5SGFzaCIpCgpmb3IgaSBpbiAke2RlcGVuZGVuY2llc1tAXX0gOyBkbwogICAgbG9nICJEb3dubG9hZGluZyBkZXBlbmRlbmN5OiAkaSIKICAgIGY9JChiYXNlbmFtZSAkaSkKICAgIHNhZmVfZG93bmxvYWQgJHtiYXNlX2Rpcn0vJGYgJGkKICAgICMgJENVUkwgLWtzZiAtLXJldHJ5IDEwIC0tcmV0cnktZGVsYXkgNSAtLXJldHJ5LW1heC10aW1lIDI0MCAtbyAke2Jhc2VfZGlyfS8kZiAkaQpkb25lCgojIyBWZXJpZnkKIyBNQ1AgbXVzdCBiZSBydW5uaW5nIGZpcnN0Cm1jcF9ydW5uaW5nCmJhc2VfY29uZmlnX2F2YWlsYWJsZQoKaWYgISAkc2tpcF92ZXJpZnkgOyB0aGVuCiAgICB2ZXJpZnlfc2NyaXB0PSIke2Jhc2VfZGlyfS92ZXJpZnlIYXNoIgogICAgaWYgISAkVE1TSCBsb2FkIHN5cyBjb25maWcgbWVyZ2UgZmlsZSAkdmVyaWZ5X3NjcmlwdCA7IHRoZW4KICAgICAgICBsb2cgIkNMSSB2ZXJpZmljYXRpb24gc2NyaXB0IGlzIG5vdCB2YWxpZDogJHZlcmlmeV9zY3JpcHQiCiAgICAgICAgZXhpdCAxCiAgICBmaQoKICAgIGZvciBpIGluICR7ZGVwZW5kZW5jaWVzW0BdfSA7IGRvCiAgICAgICAgZj0kKGJhc2VuYW1lICRpKQogICAgICAgIGlmIFtbICRmICE9ICJ2ZXJpZnlIYXNoIiBdXSA7IHRoZW4KICAgICAgICAgICAgbG9nICJWZXJpZnlpbmcgZGVwZW5kZW5jeTogJGYiCiAgICAgICAgICAgIGlmICEgJFRNU0ggcnVuIGNsaSBzY3JpcHQgdmVyaWZ5SGFzaCAiL2NvbmZpZy9jbG91ZC8kZiIgOyB0aGVuCiAgICAgICAgICAgICAgICBsb2cgIkRlcGVuZGVuY3kgaXMgbm90IHZhbGlkOiAkZiIKICAgICAgICAgICAgICAgIGV4aXQgMQogICAgICAgICAgICBmaQogICAgICAgIGZpCiAgICBkb25lCmVsc2UKICAgIGxvZyAiV2FybmluZzogU2tpcHBpbmcgZGVwZW5kZW5jeSB2ZXJpZmljYXRpb24iCmZpCgojIyBJbnN0YWxsCm1rZGlyIC1wICRiYXNlX2RlcGVuZGVuY3lfZGlyCmZvciBpIGluICR7ZGVwZW5kZW5jaWVzW0BdfSA7IGRvCiAgICBmPSQoYmFzZW5hbWUgJGkpCiAgICBsb2cgIkluc3RhbGxpbmcgZGVwZW5kZW5jeTogJGYiCiAgICBpZiBbWyAkZiA9PSAqIi50YXIiKiBdXSA7IHRoZW4KICAgICAgICB0YXIgeGZ6ICR7YmFzZV9kaXJ9LyR7Zn0gLUMgJGJhc2VfZGVwZW5kZW5jeV9kaXIKICAgIGZpCmRvbmUKCiMjIFNpZ25hbAp0b3VjaCAiJHtiYXNlX2Rpcn0vY2xvdWRMaWJzUmVhZHkiCgojIyMgUHJvdmlzaW9uIERldmljZSAjIyMKbWtkaXIgLXAgJGJhc2VfbG9nX2Rpcgpob3N0bmFtZT0iIgppZiBbWyAkY2xvdWQgPT0gImF3cyIgXV07IHRoZW4KICAgIGhvc3RuYW1lPSQoJENVUkwgLXNmIC0tcmV0cnkgMjAgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9sYXRlc3QvbWV0YS1kYXRhL2hvc3RuYW1lKQplbGlmIFtbICRjbG91ZCA9PSAiYXp1cmUiIF1dOyB0aGVuCiAgICBtZXRhZGF0YT0kKCRDVVJMIC1IIE1ldGFkYXRhOnRydWUgImh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbWV0YWRhdGEvaW5zdGFuY2UvY29tcHV0ZT9hcGktdmVyc2lvbj0yMDE3LTEyLTAxIikKICAgIGhvc3RuYW1lPSQoZWNobyAke21ldGFkYXRhfSB8IGpxIC5uYW1lIC0tcmF3LW91dHB1dCkKICAgIGhvc3RuYW1lKz0iLiIKICAgIGhvc3RuYW1lKz0kKGVjaG8gJHttZXRhZGF0YX0gfCBqcSAubG9jYXRpb24gLS1yYXctb3V0cHV0KQogICAgaG9zdG5hbWUrPSIuY2xvdWRhcHAuYXp1cmUuY29tIgpmaQpob3N0PSJsb2NhbGhvc3QiCnNlcGFyYXRvcj0iOyIKCiMgQ291bGQgdXNlIGEgZ2VuZXJpYyAtLW9uYm9hcmR8LS1uZXR3b3JrfGV0YyBmb3Igb3B0aW9uYWwgYXJndW1lbnRzCiMgaW5zdGVhZCwgYXQgbGVhc3QgZm9yIG5vdyBpbXBsZW1lbnQgdGhlIGFkZGl0aW9uYWwgYWJzdHJhY3Rpb24KCiMjIE9uYm9hcmQKb25ib2FyZF9hcmdzPSIiCmlmIFsgLW4gIiRjbG91ZCIgXSA7IHRoZW4gb25ib2FyZF9hcmdzKz0iLS1jbG91ZCAke2Nsb3VkfSAiIDsgZmkKaWYgWyAtbiAiJGxpY2Vuc2UiIF0gOyB0aGVuIG9uYm9hcmRfYXJncys9Ii0tbGljZW5zZSAke2xpY2Vuc2V9ICIgOyBmaQppZiBbIC1uICIkbnRwIiBdIDsgdGhlbiBvbmJvYXJkX2FyZ3MrPSItLW50cCAke250cH0gIiA7IGZpCmlmIFsgLW4gIiR0aW1lem9uZSIgXSA7IHRoZW4gb25ib2FyZF9hcmdzKz0iLS10eiAke3RpbWV6b25lfSAiIDsgZmkKaWYgWyAtbiAiJGxpY2Vuc2VfcG9vbCIgXSA7IHRoZW4KICAgICMgQ2hlY2sgZm9yIG11bGl0aXBsZSBsaWNlbnNlIHBvb2xzCiAgICBPSUZTPSRJRlMKICAgIElGUz0iLCI7CiAgICBsaWNlbnNlQXJyYXk9KCRsaWNlbnNlX3Bvb2wpOwogICAgZm9yIGkgaW4gJHtsaWNlbnNlQXJyYXlbQF19OyBkbwogICAgICAgIGZsYWc9JyAtLWNyZWF0ZS1saWNlbnNlLXBvb2wgJwogICAgICAgIGNhdF9hcmdzPSIke2NhdF9hcmdzfSR7ZmxhZ30kaSIKICAgIGRvbmUKICAgIElGUz0kT0lGUzsKICAgIG9uYm9hcmRfYXJncys9IiR7Y2F0X2FyZ3N9ICIgOyBmaQoKaWYgWyAtbiAiJHJlZ19rZXlfcG9vbCIgXSA7IHRoZW4gb25ib2FyZF9hcmdzKz0iLS1jcmVhdGUtcmVnLWtleS1wb29sICR7cmVnX2tleV9wb29sfSAiIDsgZmkKCmlmIFtbICRjbG91ZCA9PSAiYXdzIiBdXTsgdGhlbgogICAgaWYgWyAtbiAiJGRhdGFfaW50ZXJmYWNlIiBdIDsgdGhlbiBvbmJvYXJkX2FyZ3MrPSItLWRucyAkKGdldF9uZXRfaW5mbyAkZGF0YV9pbnRlcmZhY2UgbnMpICIgOyBmaQplbGlmIFtbICRjbG91ZCA9PSAiYXp1cmUiIF1dOyB0aGVuCiAgICBpZiBbIC1uICIkZGF0YV9pbnRlcmZhY2UiIF0gOyB0aGVuIG9uYm9hcmRfYXJncys9Ii0tZG5zIDE2OC42My4xMjkuMTYgIiA7IGZpCmZpCgppZiBbWyAiJChnZXRfdmVyc2lvbikiID09ICJiaWctaXEiICYmIC1uICIkcGFzc3dvcmRfZGF0YV91cmkiIF1dOyB0aGVuCiAgICBvbmJvYXJkX2FyZ3MrPSItLWJpZy1pcS1wYXNzd29yZC1kYXRhLXVyaSAke3Bhc3N3b3JkX2RhdGFfdXJpfSAiCmVsaWYgW1sgIiQoZ2V0X3ZlcnNpb24pIiA9PSAiYmlnLWlxIiBdXTsgdGhlbgogICAgb25ib2FyZF9hcmdzKz0iLS1zZXQtbWFzdGVyLWtleSAiCmZpCgppZiBbIC1uICIkdXNhZ2VfYW5hbHl0aWNzIiBdIDsgdGhlbgogICAgbz0kKGpzb25pZnkgJHVzYWdlX2FuYWx5dGljcykKICAgICMgT2JmdXNjYXRlIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbgogICAgY0k9JChlY2hvICQoZ2V0X3ZhbCAiJG8iIGNJKSB8IHNoYTUxMnN1bSB8IGN1dCAtZCAiICIgLWYgMSkKICAgIGRJPSQoZWNobyAkKGdldF92YWwgIiRvIiBkSSkgfCBzaGE1MTJzdW0gfCBjdXQgLWQgIiAiIC1mIDEpCiAgICBtZXRyaWNzKz0iY2xvdWROYW1lOiQoZ2V0X3ZhbCAiJG8iIGNOKSxyZWdpb246JChnZXRfdmFsICIkbyIgciksY3VzdG9tZXJJZDoke2NJfSIKICAgIG1ldHJpY3MrPSIsZGVwbG95bWVudElkOiR7ZEl9LGxpY2Vuc2VUeXBlOiQoZ2V0X3ZhbCAiJG8iIGxUKSxiaWdJcFZlcnNpb246JChnZXRfdmFsICIkbyIgYklWKSIKICAgIG1ldHJpY3MrPSIsdGVtcGxhdGVOYW1lOiQoZ2V0X3ZhbCAiJG8iIHROKSx0ZW1wbGF0ZVZlcnNpb246JChnZXRfdmFsICIkbyIgdFYpICIKICAgIHNlbmRfYW5hbHl0aWNzPSQoZ2V0X3ZhbCAiJG8iIHNlbmQpCiAgICBpZiBbWyAiJHtzZW5kX2FuYWx5dGljcywsfSIgPT0gInllcyIgXV0gOyB0aGVuIG9uYm9hcmRfYXJncys9Ii0tbWV0cmljcyAkbWV0cmljcyAiIDsgZmkKZmkKCiROT0RFICIke2Jhc2VfZGVwZW5kZW5jeV9kaXJ9L2Y1LWNsb3VkLWxpYnMvc2NyaXB0cy9vbmJvYXJkLmpzIiAtLWhvc3QgJGhvc3QgLS1sb2ctbGV2ZWwgJGxvZ19sZXZlbCBcCiAgICAtLW91dHB1dCAiJHtiYXNlX2xvZ19kaXJ9L29uYm9hcmQubG9nIiAtLXNpZ25hbCBPTkJPQVJEX0RPTkUgLS1ob3N0bmFtZSAkaG9zdG5hbWUgJG9uYm9hcmRfYXJncyAmPj4gJHtiYXNlX2xvZ19kaXJ9L2luc3RhbGwubG9nCgojIFRPRE86IFJhY2UgY29uZGl0aW9uIGJldHdlZW4gb25ib2FyZC9uZXR3b3JrIC0gVXNpbmcgYXV0aCB0b2tlbiByZXN1bHRzIGluIDQwMyAibm90IGF1dGhvcml6ZWQiCiMgaWYgbmV0d29yayBjYWxsIGltbWVkaWF0ZWx5IGZvbGxvd3Mgb25ib2FyZC4gIFVzZSBmb2xsb3dpbmcgcGxhY2Vob2xkZXIgdW50aWwgZml4ZWQgaW4gZjUtY2xvdWQtbGlicwojIGFkZGluZyAtLXdhaXQtZm9yIHNpZ25hbCBmb3IgbmV0d29yayBjYWxsLgp3YWl0X3RpbWU9MzAKbG9nICJXYWl0aW5nOiAkd2FpdF90aW1lIgpzbGVlcCAkd2FpdF90aW1lCgojIyBOZXR3b3JrCmVjaG8gIkNvbmZpZ3VyaW5nIG5ldHdvcmsuLi4iCm5ldHdvcmtfYXJncz0iIgppZiBbIC1uICIkZGF0YV9pbnRlcmZhY2UiIF0gOyB0aGVuIG5ldHdvcmtfYXJncys9Ii0tZGVmYXVsdC1ndyAkKGdldF9uZXRfaW5mbyAkZGF0YV9pbnRlcmZhY2UgZ3cpICIgOyBmaQppZiBbIC1uICIkdmxhbiIgXSA7IHRoZW4KICAgIGZvciBpIGluICQoZWNobyAkdmxhbiB8IHRyICIkc2VwYXJhdG9yIiAnICcpIDsgZG8KICAgICAgICBvPSQoanNvbmlmeSAkaSkKICAgICAgICBuZXR3b3JrX2FyZ3MrPSItLXZsYW4gbmFtZTokKGdldF92YWwgIiRvIiBuKSxuaWM6JChnZXRfdmFsICIkbyIgbmljKSAiCiAgICBkb25lCmZpCmlmIFsgLW4gIiRzZWxmX2lwIiBdIDsgdGhlbgogICAgZm9yIGkgaW4gJChlY2hvICRzZWxmX2lwIHwgdHIgIiRzZXBhcmF0b3IiICcgJykgOyBkbwogICAgICAgIG89JChqc29uaWZ5ICRpKQogICAgICAgIGd3PSQoZ2V0X25ldF9pbmZvICQoZ2V0X3ZhbCAiJG8iIGkpIGd3IGNpZHIpCiAgICAgICAgbmV0d29ya19hcmdzKz0iLS1zZWxmLWlwIG5hbWU6JChnZXRfdmFsICIkbyIgbiksYWRkcmVzczokKGdldF92YWwgIiRvIiBhKS8ke2d3IyovfSx2bGFuOiQoZ2V0X3ZhbCAiJG8iIHYpICIKICAgIGRvbmUKZmkKaWYgWyAtbiAiJGRpc2NvdmVyeV9hZGRyZXNzIiBdIDsgdGhlbgogICAgbmV0d29ya19hcmdzKz0iLS1kaXNjb3ZlcnktYWRkcmVzcyAke2Rpc2NvdmVyeV9hZGRyZXNzfSIKZmkKJE5PREUgIiR7YmFzZV9kZXBlbmRlbmN5X2Rpcn0vZjUtY2xvdWQtbGlicy9zY3JpcHRzL25ldHdvcmsuanMiIC0taG9zdCAkaG9zdCAtLWxvZy1sZXZlbCAkbG9nX2xldmVsIFwKICAgIC0tb3V0cHV0ICIke2Jhc2VfbG9nX2Rpcn0vbmV0d29yay5sb2ciIC0td2FpdC1mb3IgT05CT0FSRF9ET05FIC0tc2lnbmFsIE5FVFdPUktfRE9ORSAkbmV0d29ya19hcmdzICY+PiAke2Jhc2VfbG9nX2Rpcn0vaW5zdGFsbC5sb2cKCiMjIENsdXN0ZXIKaWYgW1sgLW4gIiRtYXN0ZXIiICYmIC1uICIkYmlnX2lxX2ZhaWxvdmVyX3BlZXJfaXAiIF1dIDsgdGhlbgogICAgZWNobyAiQ29uZmlndXJpbmcgY2x1c3Rlci4uLiIKICAgIGNsdXN0ZXJfYXJncz0iLS1jbG91ZCAkY2xvdWQgLS1tYXN0ZXIgLS1iaWctaXEtZmFpbG92ZXItcGVlci1pcCAkYmlnX2lxX2ZhaWxvdmVyX3BlZXJfaXAiCiAgICBpZiBbIC1uICIkcGFzc3dvcmRfZGF0YV91cmkiIF0gOyB0aGVuCiAgICAgICAgY2x1c3Rlcl9hcmdzKz0iIC0tYmlnLWlxLXBhc3N3b3JkLWRhdGEtdXJpICRwYXNzd29yZF9kYXRhX3VyaSIKICAgIGZpCiAgICAkTk9ERSAiJHtiYXNlX2RlcGVuZGVuY3lfZGlyfS9mNS1jbG91ZC1saWJzL3NjcmlwdHMvY2x1c3Rlci5qcyIgLS1ob3N0ICRob3N0IC0tbG9nLWxldmVsICRsb2dfbGV2ZWwgXAogICAgICAgIC0tb3V0cHV0ICIke2Jhc2VfbG9nX2Rpcn0vY2x1c3Rlci5sb2ciIC0tdXNlciBhZG1pbiAkY2x1c3Rlcl9hcmdzICY+PiAke2Jhc2VfbG9nX2Rpcn0vaW5zdGFsbC5sb2cKZmkKCiMjIENyZWF0ZSBpQ2FsbCBzY3JpcHQgYW5kIGhhbmRsZXIgdG8gaGFuZGxlIGZhaWxvdmVyCmZhaWxvdmVyX3NjcmlwdF9sb2M9Ii9jb25maWcvY2xvdWQvYXdzL25vZGVfbW9kdWxlcy9AZjVkZXZjZW50cmFsL2Y1LWNsb3VkLWxpYnMtJHtjbG91ZH0vc2NyaXB0cy9mYWlsb3Zlci5qcyIKaWNhbGxfaGFuZGxlcl9uYW1lPSJGYWlsb3ZlckhhbmRsZXIiCmljYWxsX3NjcmlwdF9uYW1lPSJGYWlsb3ZlckNvbGxlY3RvciIKCmZhaWxvdmVyX2FyZ3M9Ii0tbG9nLWxldmVsICRsb2dfbGV2ZWwgLS1sb2ctZmlsZSAvdmFyL2xvZy9jbG91ZC8kY2xvdWQvZmFpbG92ZXIubG9nIC0tdGFnLWtleSBmNV9kZXBsb3ltZW50ICIKaWYgWyAtbiAiJHRhZ192YWx1ZSIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXRhZy12YWx1ZSAkdGFnX3ZhbHVlICIKZmkKCmlmIFsgLW4gIiR2aXBfYWxsb2NhdGlvbl9pZCIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXZpcC1hbGxvY2F0aW9uLWlkICR2aXBfYWxsb2NhdGlvbl9pZCAiCmZpCgppZiBbIC1uICIkcHJpdmF0ZV9pcCIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXByaXZhdGUtaXAgJHByaXZhdGVfaXAgIgpmaQoKaWYgWyAtbiAiJGFzc29jaWF0ZV9lbmkiIF0gOyB0aGVuCiAgICBmYWlsb3Zlcl9hcmdzKz0iLS1hc3NvY2lhdGUtZW5pICRhc3NvY2lhdGVfZW5pICIKZmkKCmlmIFsgLW4gIiRwYXNzd29yZF9kYXRhX3VyaSIgXSA7IHRoZW4KICAgIGZhaWxvdmVyX2FyZ3MrPSItLXBhc3N3b3JkLXVyaSAkcGFzc3dvcmRfZGF0YV91cmkiCmZpCiMjIE1ha2Ugc3VyZSB0aGUgc2Vjb25kYXJ5IHByaXZhdGUgSVAgYWRkcmVzcyBpcyBhIFNlbGYgSVAKdG1zaCBsaXN0IG5ldCBzZWxmIHwgZ3JlcCAkcHJpdmF0ZV9pcAppZiBbWyAkPyAhPSAwIF1dOyB0aGVuCiAgICB0bXNoIGNyZWF0ZSBuZXQgc2VsZiBsaWNfbWFuYWdlciB2bGFuIGludGVybmFsIGFsbG93LXNlcnZpY2UgZGVmYXVsdCBhZGRyZXNzICRwcml2YXRlX2lwLzMyCmVsc2UKICAgICJBcHBlYXJzICRwcml2YXRlX2lwIGlzIGFscmVhZHkgYSBTZWxmIElQIgpmaQoKIyMgRmlyc3QgY2hlY2sgaWYgaUNhbGwgYWxyZWFkeSBleGlzdHMKdG1zaCBsaXN0IHN5cyBpY2FsbCBoYW5kbGVyIHwgZ3JlcCAkaWNhbGxfaGFuZGxlcl9uYW1lCmlmIFtbICQ/ICE9IDAgXV07IHRoZW4KICAgIHRtc2ggY3JlYXRlIHN5cyBpY2FsbCBzY3JpcHQgJGljYWxsX3NjcmlwdF9uYW1lIGRlZmluaXRpb24geyBleGVjIG5vZGUgJGZhaWxvdmVyX3NjcmlwdF9sb2MgJGZhaWxvdmVyX2FyZ3MgfQogICAgdG1zaCBjcmVhdGUgc3lzIGljYWxsIGhhbmRsZXIgcGVyaW9kaWMgL0NvbW1vbi8kaWNhbGxfaGFuZGxlcl9uYW1lIHsgZmlyc3Qtb2NjdXJyZW5jZSBub3cgaW50ZXJ2YWwgNjAgc2NyaXB0IC9Db21tb24vJGljYWxsX3NjcmlwdF9uYW1lIH0KZWxzZQogICAgZWNobyAiQXBwZWFycyB0aGUgJGljYWxsX2hhbmRsZXJfbmFtZSBpY2FsbCBhbHJlYWR5IGV4aXN0cyEiCmZp"
										]
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"BlockDeviceMappings": [{
						"DeviceName": "/dev/xvda",
						"Ebs": {
							"DeleteOnTermination": "true",
							"VolumeType": "gp2"
						}
					},
					{
						"DeviceName": "/dev/xvdb",
						"NoDevice": {

						}
					}
				],
				"IamInstanceProfile": {
					"Ref": "deviceServiceDiscoveryProfile"
				},
				"ImageId": {
					"Fn::If": [
						"noCustomImageId",
						{
							"Fn::FindInMap": [
								"regionMap",
								{
									"Ref": "AWS::Region"
								},
								"Best"
							]
						},
						{
							"Ref": "customImageId"
						}
					]
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "sshKey"
				},
				"NetworkInterfaces": [{
						"Description": "Management Interface",
						"DeviceIndex": "0",
						"NetworkInterfaceId": {
							"Ref": "device1ManagementInterface"
						}
					},
					{
						"Description": "Private or Internal Interface",
						"DeviceIndex": "1",
						"NetworkInterfaceId": {
							"Ref": "device1subnet1Az1Interface"
						}
					}
				],
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "application"
						}
					},
					{
						"Key": "Costcenter",
						"Value": {
							"Ref": "costcenter"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "environment"
						}
					},
					{
						"Key": "Group",
						"Value": {
							"Ref": "group"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [
									"Instance: ",
									{
										"Ref": "AWS::StackName"
									}
								]
							]
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "owner"
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash\n",
								"/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
								{
									"Ref": "AWS::StackId"
								},
								" -r ",
								"device1Instance",
								" --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n"
							]
						]
					}
				}
			},
			"Type": "AWS::EC2::Instance"
		},
		"device1ManagementEipAddress": {
			"Properties": {
				"Domain": "vpc"
			},
			"Type": "AWS::EC2::EIP"
		},
		"device1ManagementEipAssociation": {
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"device1ManagementEipAddress",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "device1ManagementInterface"
				}
			},
			"Type": "AWS::EC2::EIPAssociation"
		},
		"device1ManagementInterface": {
			"Properties": {
				"Description": "Management Interface for the BIG-IP",
				"GroupSet": [
					{
						"Ref": "deviceManagementSecurityGroup"
					}
				],
				"SubnetId": {
					"Ref": "managementSubnetAz1"
				}
			},
			"Type": "AWS::EC2::NetworkInterface"
		},
		"device1VipEipAddress": {
			"Properties": {
				"Domain": "vpc"
			},
			"Type": "AWS::EC2::EIP"
		},
		"device1VipEipAssociation": {
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"device1VipEipAddress",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "device1subnet1Az1Interface"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::GetAtt": [
								"device1subnet1Az1Interface",
								"SecondaryPrivateIpAddresses"
							]
						}
					]
				}
			},
			"Type": "AWS::EC2::EIPAssociation"
		},
		"device1subnet1Az1Interface": {
			"Properties": {
				"Description": "Public External Interface for the BIG-IP",
				"GroupSet": [
					{
						"Ref": "deviceSubnet1SecurityGroup"
					}
				],
				"SecondaryPrivateIpAddressCount": "1",
				"SubnetId": {
					"Ref": "subnet1Az1"
				}
			},
			"Type": "AWS::EC2::NetworkInterface"
		},
        "device1subnet1Az1SelfEipAddress": {
			"Properties": {
				"Domain": "vpc"
			},
			"Type": "AWS::EC2::EIP"
		},
		"device1subnet1Az1SelfEipAssociation": {
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"device1subnet1Az1SelfEipAddress",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "device1subnet1Az1Interface"
				},
				"PrivateIpAddress": {
					"Fn::GetAtt": [
						"device1subnet1Az1Interface",
						"PrimaryPrivateIpAddress"
					]
				}
			},
			"Type": "AWS::EC2::EIPAssociation"
		},
		"device2Instance": {
			"DependsOn": "device1Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"commands": {
							"init": {
								"command": {
									"Fn::Join": [
										"", [
											"mkdir -p /var/log/cloud/aws;cat /config/cloud/initEncoded | /usr/bin/base64 -d > /config/cloud/init.sh && chmod +x /config/cloud/init.sh;",
											"/config/cloud/init.sh --cloud aws --skip-verify --log-level debug --data-interface eth1 --license ",
											{
												"Ref": "licenseKey2"
											},
											" --ntp ",
											{
												"Ref": "ntpServer"
											},
											" --timezone ",
											{
												"Ref": "timezone"
											},
											" --create-license-pool ",
											{
												"Ref": "licensePoolKeys"
											},
											" --create-reg-key-pool ",
											{
												"Ref": "regPoolKeys"
											},
											" --big-iq-password-data-uri ",
											{
												"Ref": "bigIqPasswordS3Arn"
											},
											" --fcl-tag v4.6.0",
											" --fcl-cloud-tag v2.4.0",
											" --vlan 'n:internal,nic:1.1' ",
											" --self-ip 'n:internal_self,a:",
											{
												"Fn::GetAtt": [
													"device2subnet1Az2Interface",
													"PrimaryPrivateIpAddress"
												]
											},
											",i:eth1',v:internal --discovery-address ",
											{
												"Fn::GetAtt": [
													"device2subnet1Az2Interface",
													"PrimaryPrivateIpAddress"
												]
											},
											" --tag-value ",
											{
												"Ref": "AWS::StackId"
											},
											" --vip-allocation-id ",
											{
												"Fn::GetAtt": [
													"device1VipEipAddress",
													"AllocationId"
												]
											},
											" --private-ip ",
											{
												"Fn::Select": [
													"0",
													{
														"Fn::GetAtt": [
															"device2subnet1Az2Interface",
															"SecondaryPrivateIpAddresses"
														]
													}
												]
											},
											" --associate-eni ",
											{
												"Ref": "device2subnet1Az2Interface"
											},
											" --usage-analytics 'send:",
											{
												"Ref": "allowUsageAnalytics"
											},
											",r:",
											{
												"Ref": "AWS::Region"
											},
											",cI:",
											{
												"Ref": "AWS::AccountId"
											},
											",dI:",
											{
												"Ref": "AWS::StackId"
											},
											",cN:aws,lT:byol,bIV:6.0.0,tN:f5-existing-stack-byol-2nic-bigiq,tV:4.3.0' ",
											"&>> /var/log/cloud/aws/install.log &"
										]
									]
								}
							}
						},
						"files": {
							"/config/cloud/initEncoded": {
								"group": "root",
								"mode": "000400",
								"owner": "root",
								"content": {
									"Fn::Join": [
										"", [
											""
										]
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/xvda",
					"Ebs": {
						"DeleteOnTermination": "true",
						"VolumeType": "gp2"
					}
				},
					{
						"DeviceName": "/dev/xvdb",
						"NoDevice": {

						}
					}
				],
				"IamInstanceProfile": {
					"Ref": "deviceServiceDiscoveryProfile"
				},
				"ImageId": {
					"Fn::If": [
						"noCustomImageId",
						{
							"Fn::FindInMap": [
								"regionMap",
								{
									"Ref": "AWS::Region"
								},
								"Best"
							]
						},
						{
							"Ref": "customImageId"
						}
					]
				},
				"InstanceType": {
					"Ref": "instanceType"
				},
				"KeyName": {
					"Ref": "sshKey"
				},
				"NetworkInterfaces": [{
					"Description": "Management Interface",
					"DeviceIndex": "0",
					"NetworkInterfaceId": {
						"Ref": "device2ManagementInterface"
					}
				},
					{
						"Description": "Private or Internal Interface",
						"DeviceIndex": "1",
						"NetworkInterfaceId": {
							"Ref": "device2subnet1Az2Interface"
						}
					}
				],
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "application"
					}
				},
					{
						"Key": "Costcenter",
						"Value": {
							"Ref": "costcenter"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "environment"
						}
					},
					{
						"Key": "Group",
						"Value": {
							"Ref": "group"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [
									"Instance: ",
									{
										"Ref": "AWS::StackName"
									}
								]
							]
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "owner"
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash\n",
								"/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
								{
									"Ref": "AWS::StackId"
								},
								" -r ",
								"device2Instance",
								" --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n"
							]
						]
					}
				}
			},
			"Type": "AWS::EC2::Instance"
		},
		"device2ManagementEipAddress": {
			"Properties": {
				"Domain": "vpc"
			},
			"Type": "AWS::EC2::EIP"
		},
		"device2ManagementEipAssociation": {
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"device2ManagementEipAddress",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "device2ManagementInterface"
				}
			},
			"Type": "AWS::EC2::EIPAssociation"
		},
		"device2ManagementInterface": {
			"Properties": {
				"Description": "Management Interface for the device",
				"GroupSet": [
					{
						"Ref": "deviceManagementSecurityGroup"
					}
				],
				"SubnetId": {
					"Ref": "managementSubnetAz2"
				}
			},
			"Type": "AWS::EC2::NetworkInterface"
		},
		"device2subnet1Az2Interface": {
			"Properties": {
				"Description": "Public External Interface for the device",
				"GroupSet": [
					{
						"Ref": "deviceSubnet1SecurityGroup"
					}
				],
				"SecondaryPrivateIpAddressCount": "1",
				"SubnetId": {
					"Ref": "subnet1Az2"
				}
			},
			"Type": "AWS::EC2::NetworkInterface"
		},
		"device2subnet1Az2SelfEipAddress": {
			"Properties": {
				"Domain": "vpc"
			},
			"Type": "AWS::EC2::EIP"
		},
		"device2subnet1Az2SelfEipAssociation": {
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"device2subnet1Az2SelfEipAddress",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "device2subnet1Az2Interface"
				},
				"PrivateIpAddress": {
					"Fn::GetAtt": [
						"device2subnet1Az2Interface",
						"PrimaryPrivateIpAddress"
					]
				}
			},
			"Type": "AWS::EC2::EIPAssociation"
		},
		"deviceManagementSecurityGroup": {
			"Properties": {
				"GroupDescription": "management interface policy",
				"SecurityGroupIngress": [{
						"CidrIp": {
							"Ref": "restrictedSrcAddress"
						},
						"FromPort": "22",
						"IpProtocol": "tcp",
						"ToPort": "22"
					},
					{
						"CidrIp": {
							"Ref": "restrictedSrcAddress"
						},
						"FromPort": "443",
						"IpProtocol": "tcp",
						"ToPort": "443"
					},
					{
						"CidrIp": {
							"Ref": "restrictedSrcAddressApp"
						},
						"FromPort": "27017",
						"IpProtocol": "tcp",
						"ToPort": "27017"
					}

				],
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "application"
						}
					},
					{
						"Key": "Costcenter",
						"Value": {
							"Ref": "costcenter"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "environment"
						}
					},
					{
						"Key": "Group",
						"Value": {
							"Ref": "group"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [
									"Management Security Group:",
									{
										"Ref": "AWS::StackName"
									}
								]
							]
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "owner"
						}
					}
				],
				"VpcId": {
					"Ref": "Vpc"
				}
			},
			"Type": "AWS::EC2::SecurityGroup"
		},
		"deviceSubnet1SecurityGroup": {
			"Properties": {
				"GroupDescription": "internal interface policy",
				"SecurityGroupIngress": [
					{
						"CidrIp": {
						"Ref": "restrictedSrcAddress"
						},
						"FromPort": "22",
						"IpProtocol": "tcp",
						"ToPort": "22"
					},
					{
						"CidrIp": {
							"Ref": "restrictedSrcAddressApp"
						},
						"FromPort": "443",
						"IpProtocol": "tcp",
						"ToPort": "443"
					},
					{
						"CidrIp": {
							"Ref": "restrictedSrcAddressApp"
						},
						"FromPort": "27017",
						"IpProtocol": "tcp",
						"ToPort": "27017"
					}

				],
				"Tags": [{
						"Key": "Application",
						"Value": {
							"Ref": "application"
						}
					},
					{
						"Key": "Costcenter",
						"Value": {
							"Ref": "costcenter"
						}
					},
					{
						"Key": "Environment",
						"Value": {
							"Ref": "environment"
						}
					},
					{
						"Key": "Group",
						"Value": {
							"Ref": "group"
						}
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"", [
									"Internal Security Group:",
									{
										"Ref": "AWS::StackName"
									}
								]
							]
						}
					},
					{
						"Key": "Owner",
						"Value": {
							"Ref": "owner"
						}
					}
				],
				"VpcId": {
					"Ref": "Vpc"
				}
			},
			"Type": "AWS::EC2::SecurityGroup"
		},
		"deviceServiceDiscoveryAccessRole": {
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Action": [
								"sts:AssumeRole"
							],
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							}
						}
					],
					"Version": "2012-10-17"
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyDocument": {
							"Statement": [
                                {
                                 "Action": [
                                  "ec2:DescribeInstances",
                                  "ec2:DescribeInstanceStatus",
                                  "ec2:DescribeAddresses",
                                  "ec2:AssociateAddress",
                                  "ec2:DisassociateAddress",
                                  "ec2:DescribeNetworkInterfaces",
                                  "ec2:DescribeNetworkInterfaceAttribute",
                                  "ec2:DescribeRouteTables",
                                  "ec2:ReplaceRoute",
                                  "ec2:assignprivateipaddresses",
                                  "ec2:CreateTags",
                                  "ec2:DescribeTags",
                                  "sts:AssumeRole"
                                 ],
                                 "Effect": "Allow",
                                 "Resource": [
                                  "*"
                                 ]
                                },
								{
									"Effect": "Allow",
									"Action": [
										"s3:Get*",
										"s3:List*"
									],
									"Resource": {
										"Ref": "bigIqPasswordS3Arn"
									}
								}
							],
							"Version": "2012-10-17"
						},
						"PolicyName": "deviceServiceDiscoveryPolicy"
					}
				]
			},
			"Type": "AWS::IAM::Role"
		},
		"deviceServiceDiscoveryProfile": {
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "deviceServiceDiscoveryAccessRole"
					}
				]
			},
			"Type": "AWS::IAM::InstanceProfile"
		}
	}
}