{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  }
 },
 "Description": "Template v5.10.0: AWS CloudFormation Template for creating a Across-AZs cluster of 2NIC BIG-IPs in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "ap-east-1": {
    "AdvancedWaf1000Mbps": "ami-0ea5d4ba07cf17ddc",
    "AdvancedWaf16vCPU": "ami-0b503b47f2ebfaaef",
    "AdvancedWaf200Mbps": "ami-08c288271d3e99a09",
    "AdvancedWaf25Mbps": "ami-02f60491f866e3db5",
    "AdvancedWaf8vCPU": "ami-0965bf0f197629ae4",
    "Best10000Mbps": "ami-07d621bf7762787a0",
    "Best1000Mbps": "ami-0af73bd2ef2e84394",
    "Best200Mbps": "ami-029287fc49b2e6678",
    "Best25Mbps": "ami-0c0515d48efd1badc",
    "Best5000Mbps": "ami-0b9b9b11ddc796775",
    "Better10000Mbps": "ami-05ccf956e8185c2be",
    "Better1000Mbps": "ami-01a660cfa43ad4476",
    "Better200Mbps": "ami-04d28ea0a453bdd82",
    "Better25Mbps": "ami-0389fea05b4004680",
    "Better5000Mbps": "ami-0f39c1ccf39779e95",
    "Good10000Mbps": "ami-04bf1e786c5509b42",
    "Good1000Mbps": "ami-074497859335cf8fc",
    "Good16vCPU": "ami-0b0aeaea674068ae5",
    "Good200Mbps": "ami-0fc1621c479ca3b3e",
    "Good25Mbps": "ami-0faffc92d06101087",
    "Good5000Mbps": "ami-0a3112104228f4b91",
    "PerAppVeAwaf200Mbps": "ami-049358fc954e68fd5",
    "PerAppVeAwaf25Mbps": "ami-05fdc4b57d5cdbb48",
    "PerAppVeLtm200Mbps": "ami-09974bccf582bb29e",
    "PerAppVeLtm25Mbps": "ami-0fa2a5c5aa3c3a104"
   },
   "ap-northeast-1": {
    "AdvancedWaf1000Mbps": "ami-0eb13bdeea33c7886",
    "AdvancedWaf16vCPU": "ami-08e7a24d6b5f2d25f",
    "AdvancedWaf200Mbps": "ami-02d4fed40390bf2b1",
    "AdvancedWaf25Mbps": "ami-0298e5520c04c3074",
    "AdvancedWaf8vCPU": "ami-0fba2f3e7f09362f3",
    "Best10000Mbps": "ami-054feaf32716fc19e",
    "Best1000Mbps": "ami-0afb52845fd32a69a",
    "Best200Mbps": "ami-05335000aeb813389",
    "Best25Mbps": "ami-0b73cc18ca6c572cf",
    "Best5000Mbps": "ami-03b23aa06f2051b00",
    "Better10000Mbps": "ami-03b662639fe35ac8d",
    "Better1000Mbps": "ami-0846a9791d888b86e",
    "Better200Mbps": "ami-01ccd0e0ce15aee86",
    "Better25Mbps": "ami-0d4cb11ce62b8de83",
    "Better5000Mbps": "ami-08d88abd99b7a414a",
    "Good10000Mbps": "ami-0c67afa4496943b7e",
    "Good1000Mbps": "ami-05f41f64adcdd5436",
    "Good16vCPU": "ami-009a181d51056a56d",
    "Good200Mbps": "ami-0e4ff97bfef330099",
    "Good25Mbps": "ami-076f4df8c771dc0f2",
    "Good5000Mbps": "ami-085812c38f1a601f6",
    "PerAppVeAwaf200Mbps": "ami-084343973f45cea31",
    "PerAppVeAwaf25Mbps": "ami-01977aaf0981ba580",
    "PerAppVeLtm200Mbps": "ami-03bcc395f5b73352d",
    "PerAppVeLtm25Mbps": "ami-06417ff5079dc57fb"
   },
   "ap-northeast-2": {
    "AdvancedWaf1000Mbps": "ami-0774ebbdcdd9a4ec8",
    "AdvancedWaf16vCPU": "ami-0d107c8e3d85b1df8",
    "AdvancedWaf200Mbps": "ami-0c2928af7b5d31535",
    "AdvancedWaf25Mbps": "ami-09a0ad0b77f6e25ac",
    "AdvancedWaf8vCPU": "ami-0e568a375ee11a41a",
    "Best10000Mbps": "ami-040e2731b92c6a972",
    "Best1000Mbps": "ami-042f5b0bba9cbe34e",
    "Best200Mbps": "ami-08e92928916e78df4",
    "Best25Mbps": "ami-0bf9bace88354d3c6",
    "Best5000Mbps": "ami-0b621fdb464558f55",
    "Better10000Mbps": "ami-059eb7fe4743f16b0",
    "Better1000Mbps": "ami-09edd1ee39bdc24e7",
    "Better200Mbps": "ami-0d189b653f7e79755",
    "Better25Mbps": "ami-0ab914115a9b1023a",
    "Better5000Mbps": "ami-064bc1fc3fb614bba",
    "Good10000Mbps": "ami-0b1be2651f868ad26",
    "Good1000Mbps": "ami-0e55b92a3cc7c98f9",
    "Good16vCPU": "ami-03365f412d3ff4ac3",
    "Good200Mbps": "ami-07d003a9af07029a4",
    "Good25Mbps": "ami-0557c51c887c4fe2e",
    "Good5000Mbps": "ami-099a50977678d09ac",
    "PerAppVeAwaf200Mbps": "ami-062bcade2c21e3151",
    "PerAppVeAwaf25Mbps": "ami-028008f16246f315c",
    "PerAppVeLtm200Mbps": "ami-03a218f859cd9197c",
    "PerAppVeLtm25Mbps": "ami-0dc91db3fb25e06a7"
   },
   "ap-south-1": {
    "AdvancedWaf1000Mbps": "ami-0fdaff4ce51c317ec",
    "AdvancedWaf16vCPU": "ami-033b57430dbaf543e",
    "AdvancedWaf200Mbps": "ami-054f982b239eb42a5",
    "AdvancedWaf25Mbps": "ami-0c3be030e62be48ab",
    "AdvancedWaf8vCPU": "ami-076553f52d47b0823",
    "Best10000Mbps": "ami-01f4ae49f62bc09c5",
    "Best1000Mbps": "ami-01728fd53d5026680",
    "Best200Mbps": "ami-05dca4bc6881749d9",
    "Best25Mbps": "ami-02ffb377b8c80f1d6",
    "Best5000Mbps": "ami-027b965ab7faaece5",
    "Better10000Mbps": "ami-0320cfc239e35e359",
    "Better1000Mbps": "ami-07aa238e470e6d98b",
    "Better200Mbps": "ami-01173ab4cdad7a791",
    "Better25Mbps": "ami-0b739b09e9df5e971",
    "Better5000Mbps": "ami-09c746d17579701e4",
    "Good10000Mbps": "ami-03717408f276e3430",
    "Good1000Mbps": "ami-03f661257759efb11",
    "Good16vCPU": "ami-0671dea6cca3709cd",
    "Good200Mbps": "ami-0b8761f40452fb143",
    "Good25Mbps": "ami-0db15ced7594a4018",
    "Good5000Mbps": "ami-0a48e4d7f58797dc6",
    "PerAppVeAwaf200Mbps": "ami-02561f7dc13c34fbb",
    "PerAppVeAwaf25Mbps": "ami-036282c277e5f978d",
    "PerAppVeLtm200Mbps": "ami-0f093fa619c3ad93b",
    "PerAppVeLtm25Mbps": "ami-023cd7af3b5b8012a"
   },
   "ap-southeast-1": {
    "AdvancedWaf1000Mbps": "ami-033500f40b38bc3b1",
    "AdvancedWaf16vCPU": "ami-0dbdac181a552e810",
    "AdvancedWaf200Mbps": "ami-078c2dc1b74fce7de",
    "AdvancedWaf25Mbps": "ami-00cfdfcfc526de3ab",
    "AdvancedWaf8vCPU": "ami-074048608babb485e",
    "Best10000Mbps": "ami-0d79c1d847ce98f6c",
    "Best1000Mbps": "ami-06d9e89aa241a999f",
    "Best200Mbps": "ami-0eefd1a407660a630",
    "Best25Mbps": "ami-096aee0cfc45a95b6",
    "Best5000Mbps": "ami-061b65c1945b27291",
    "Better10000Mbps": "ami-02daa067a9d05df58",
    "Better1000Mbps": "ami-0c01c7a1ea3998456",
    "Better200Mbps": "ami-04c3eaf3d1beb2d9d",
    "Better25Mbps": "ami-05db5798edb85226e",
    "Better5000Mbps": "ami-08b006dad402d8814",
    "Good10000Mbps": "ami-0193107603167dcc0",
    "Good1000Mbps": "ami-0371356256b9ba5ec",
    "Good16vCPU": "ami-0a3420534626f2e68",
    "Good200Mbps": "ami-0a1cab042c1496e37",
    "Good25Mbps": "ami-0113da24e133801f1",
    "Good5000Mbps": "ami-068784561adc80a55",
    "PerAppVeAwaf200Mbps": "ami-043872e1d88f47491",
    "PerAppVeAwaf25Mbps": "ami-06579fb67a138a537",
    "PerAppVeLtm200Mbps": "ami-0caf001e78d012cdb",
    "PerAppVeLtm25Mbps": "ami-0a592f722d9aebd6d"
   },
   "ap-southeast-2": {
    "AdvancedWaf1000Mbps": "ami-085154456a2d2ae7d",
    "AdvancedWaf16vCPU": "ami-0373412f0413767a1",
    "AdvancedWaf200Mbps": "ami-0551c8c156e76eb86",
    "AdvancedWaf25Mbps": "ami-0c10a5d98c0cad94c",
    "AdvancedWaf8vCPU": "ami-0bf76f58856c7bda9",
    "Best10000Mbps": "ami-0f1e06fc885e54bbe",
    "Best1000Mbps": "ami-0fa5d9bde30093ea2",
    "Best200Mbps": "ami-0e375da090a7894a7",
    "Best25Mbps": "ami-03993da9064bd8fff",
    "Best5000Mbps": "ami-0172ea76eb36027f2",
    "Better10000Mbps": "ami-0f90166c13793f9a9",
    "Better1000Mbps": "ami-09476573dea516320",
    "Better200Mbps": "ami-0c8f73284a2db4e45",
    "Better25Mbps": "ami-0d1beb3a4fd3095e1",
    "Better5000Mbps": "ami-0f9ac5c050a2072fc",
    "Good10000Mbps": "ami-086bc71070b28a91e",
    "Good1000Mbps": "ami-0f6c278fc0c3a49bd",
    "Good16vCPU": "ami-011e41705be5a7828",
    "Good200Mbps": "ami-074bc7735cb2dcf0b",
    "Good25Mbps": "ami-0614d2851946d65e0",
    "Good5000Mbps": "ami-048c368c73e261b08",
    "PerAppVeAwaf200Mbps": "ami-05291acd311d99731",
    "PerAppVeAwaf25Mbps": "ami-06b86c3e10573585f",
    "PerAppVeLtm200Mbps": "ami-0f456926b5e35a3cc",
    "PerAppVeLtm25Mbps": "ami-07b66900dcc2fd858"
   },
   "ca-central-1": {
    "AdvancedWaf1000Mbps": "ami-054e34701944c0e15",
    "AdvancedWaf16vCPU": "ami-04768c8acbe62d6dd",
    "AdvancedWaf200Mbps": "ami-0bb38268fb4b73228",
    "AdvancedWaf25Mbps": "ami-04e4e61bf1951b08a",
    "AdvancedWaf8vCPU": "ami-038dfb05c53608321",
    "Best10000Mbps": "ami-09fcf9fa4b3569825",
    "Best1000Mbps": "ami-0e5ef359469121c2a",
    "Best200Mbps": "ami-015c907bf512d7f20",
    "Best25Mbps": "ami-0c461ff798bf98fd7",
    "Best5000Mbps": "ami-0f87b99196ef39de3",
    "Better10000Mbps": "ami-02c4304513141940c",
    "Better1000Mbps": "ami-0b9c9109bd7149b36",
    "Better200Mbps": "ami-01078bf2b448af2cc",
    "Better25Mbps": "ami-04b3f72be4e094d8d",
    "Better5000Mbps": "ami-04589f478a787be84",
    "Good10000Mbps": "ami-0dc29dee37615d52a",
    "Good1000Mbps": "ami-04d32a3c3e57fd40b",
    "Good16vCPU": "ami-0862f1d3f21ec65e1",
    "Good200Mbps": "ami-00c3e321038869d9f",
    "Good25Mbps": "ami-0280a59c1c238293d",
    "Good5000Mbps": "ami-097abb350c58d122d",
    "PerAppVeAwaf200Mbps": "ami-0e47208d2796276ea",
    "PerAppVeAwaf25Mbps": "ami-07b8c007c1323e403",
    "PerAppVeLtm200Mbps": "ami-07cab5c470cb4883d",
    "PerAppVeLtm25Mbps": "ami-096986fb867931102"
   },
   "eu-central-1": {
    "AdvancedWaf1000Mbps": "ami-01129c6885b431da3",
    "AdvancedWaf16vCPU": "ami-04163a5f40b37a7ee",
    "AdvancedWaf200Mbps": "ami-05482c873facc1baa",
    "AdvancedWaf25Mbps": "ami-04b7bd11d6fe4c933",
    "AdvancedWaf8vCPU": "ami-086fd9822c4f6474a",
    "Best10000Mbps": "ami-04a01688ae3921a5f",
    "Best1000Mbps": "ami-0d1177a999bcd5bcb",
    "Best200Mbps": "ami-0291a95d5e4f44472",
    "Best25Mbps": "ami-058f2b65179572e47",
    "Best5000Mbps": "ami-0d8488c18f7ef3c67",
    "Better10000Mbps": "ami-0bb6cf820ab8164d6",
    "Better1000Mbps": "ami-05bea6240d013d0bf",
    "Better200Mbps": "ami-07942a14928bbb7c0",
    "Better25Mbps": "ami-0bcf5e2191e1a22d2",
    "Better5000Mbps": "ami-01b5a7ed1bc2c0aeb",
    "Good10000Mbps": "ami-062927c0d794dfd95",
    "Good1000Mbps": "ami-02682c6fa66ac56c7",
    "Good16vCPU": "ami-0bcd23f5b8185a2b0",
    "Good200Mbps": "ami-0d068f2b3823f2b1d",
    "Good25Mbps": "ami-064f074c0fa0cb2f0",
    "Good5000Mbps": "ami-091ddc2753625b1b0",
    "PerAppVeAwaf200Mbps": "ami-0adcf48e40c3c5a57",
    "PerAppVeAwaf25Mbps": "ami-085ae72dd5f327d25",
    "PerAppVeLtm200Mbps": "ami-0fe6d0940263aec48",
    "PerAppVeLtm25Mbps": "ami-07db22f1a7fee97e5"
   },
   "eu-north-1": {
    "AdvancedWaf1000Mbps": "ami-09c96c724f5de4b6d",
    "AdvancedWaf16vCPU": "ami-0ce86610dc1c64cbe",
    "AdvancedWaf200Mbps": "ami-02f93d9ca478b9257",
    "AdvancedWaf25Mbps": "ami-037ae20be8e901022",
    "AdvancedWaf8vCPU": "ami-0427ee8e90acd3a97",
    "Best10000Mbps": "ami-05eba8aacff404c94",
    "Best1000Mbps": "ami-0e9cb972d6b14f972",
    "Best200Mbps": "ami-07299be86351f5fb4",
    "Best25Mbps": "ami-0048bbf44f72f8b8a",
    "Best5000Mbps": "ami-0971b5854303fbe54",
    "Better10000Mbps": "ami-09fd038c248c644bf",
    "Better1000Mbps": "ami-034072440bc746aa4",
    "Better200Mbps": "ami-0d03c1bc0824ac822",
    "Better25Mbps": "ami-0a568f319055b0af4",
    "Better5000Mbps": "ami-09cb279edc0187077",
    "Good10000Mbps": "ami-015736733c5692f67",
    "Good1000Mbps": "ami-0ee5ec58d7dad7baa",
    "Good16vCPU": "ami-0e76c3608aaaf4adc",
    "Good200Mbps": "ami-04d170c3c1fbdd865",
    "Good25Mbps": "ami-0fd531d0ffe8e3348",
    "Good5000Mbps": "ami-0ff74169e34836661",
    "PerAppVeAwaf200Mbps": "ami-059763712a9d0906c",
    "PerAppVeAwaf25Mbps": "ami-07627dd9adabd738a",
    "PerAppVeLtm200Mbps": "ami-07d0818cc5351a3f4",
    "PerAppVeLtm25Mbps": "ami-0ca3994a477ed2e34"
   },
   "eu-west-1": {
    "AdvancedWaf1000Mbps": "ami-0dc9f5e43ae70794f",
    "AdvancedWaf16vCPU": "ami-0c9aca37c584abde3",
    "AdvancedWaf200Mbps": "ami-08311e3251a835d9f",
    "AdvancedWaf25Mbps": "ami-04eb78344138910ce",
    "AdvancedWaf8vCPU": "ami-01231262a99db86dd",
    "Best10000Mbps": "ami-0aef6071b23821742",
    "Best1000Mbps": "ami-0c7541ecb476f49db",
    "Best200Mbps": "ami-02d2109c2829d8a80",
    "Best25Mbps": "ami-06f683a5f48f6f650",
    "Best5000Mbps": "ami-027b0c0b45ec87d42",
    "Better10000Mbps": "ami-054c915b88d0527be",
    "Better1000Mbps": "ami-06af00662670ebafd",
    "Better200Mbps": "ami-09334f06539fcb7b4",
    "Better25Mbps": "ami-0cb15c593fa4c5446",
    "Better5000Mbps": "ami-0fb80c73c8324147d",
    "Good10000Mbps": "ami-0976fa935428f37e6",
    "Good1000Mbps": "ami-039a028cc1c7b2742",
    "Good16vCPU": "ami-06fdd7584826c3a84",
    "Good200Mbps": "ami-0f213f2dd5ce2cb75",
    "Good25Mbps": "ami-0dd7074a83a4d29a0",
    "Good5000Mbps": "ami-0570feae5d7dee5ba",
    "PerAppVeAwaf200Mbps": "ami-095f3ed7c1d352afb",
    "PerAppVeAwaf25Mbps": "ami-09fb235eb5dd78729",
    "PerAppVeLtm200Mbps": "ami-095b7bdbc7498a071",
    "PerAppVeLtm25Mbps": "ami-0145822e884a08e66"
   },
   "eu-west-2": {
    "AdvancedWaf1000Mbps": "ami-01e0138a297591825",
    "AdvancedWaf16vCPU": "ami-0d12c376cf57b360f",
    "AdvancedWaf200Mbps": "ami-015b7e197e7bb60c6",
    "AdvancedWaf25Mbps": "ami-074165ba162fa4114",
    "AdvancedWaf8vCPU": "ami-01b84a79cf876fbe0",
    "Best10000Mbps": "ami-0ef744ae5c5ebd3c0",
    "Best1000Mbps": "ami-0c525dc708ed16ea1",
    "Best200Mbps": "ami-04cce6d4007eab8d6",
    "Best25Mbps": "ami-0ca3e0c61b7aa1ed8",
    "Best5000Mbps": "ami-03ad8f9c50096b423",
    "Better10000Mbps": "ami-0b0911621fee8eefb",
    "Better1000Mbps": "ami-007b6be893e15c79e",
    "Better200Mbps": "ami-051a4ac2b7abb4c07",
    "Better25Mbps": "ami-055680007f0aa8b6a",
    "Better5000Mbps": "ami-013abc447232c2110",
    "Good10000Mbps": "ami-08e80178a52d5ef91",
    "Good1000Mbps": "ami-01941e10c7e493ca5",
    "Good16vCPU": "ami-0164283e7ca2b3815",
    "Good200Mbps": "ami-0acea6a6b875154a2",
    "Good25Mbps": "ami-05a6b3435b111f784",
    "Good5000Mbps": "ami-0a30d926dcc03e065",
    "PerAppVeAwaf200Mbps": "ami-01c68f2ed86b5328d",
    "PerAppVeAwaf25Mbps": "ami-0171aaeeef61cb410",
    "PerAppVeLtm200Mbps": "ami-0d9f7dc60a7b4dc5c",
    "PerAppVeLtm25Mbps": "ami-058381c7a3859fcb2"
   },
   "eu-west-3": {
    "AdvancedWaf1000Mbps": "ami-0dc64224e6c263a8d",
    "AdvancedWaf16vCPU": "ami-0f584e0999689dcef",
    "AdvancedWaf200Mbps": "ami-061645c4fd02b43b5",
    "AdvancedWaf25Mbps": "ami-0b2f0167cbd1ae519",
    "AdvancedWaf8vCPU": "ami-00583a2ce90051b06",
    "Best10000Mbps": "ami-0dfeb1e97e476f062",
    "Best1000Mbps": "ami-00f77b46815e18cf1",
    "Best200Mbps": "ami-0b080af6aa2c1cb9a",
    "Best25Mbps": "ami-02382c8b84ff06570",
    "Best5000Mbps": "ami-0cf93a42a9162995c",
    "Better10000Mbps": "ami-009aac7530b3fb269",
    "Better1000Mbps": "ami-00f727aed38cf3d00",
    "Better200Mbps": "ami-0726d04383f1b95a6",
    "Better25Mbps": "ami-0fd33a28de85e341e",
    "Better5000Mbps": "ami-03e538ef9a259f681",
    "Good10000Mbps": "ami-03e1f152b2bd3a830",
    "Good1000Mbps": "ami-001994886351a5b59",
    "Good16vCPU": "ami-0d4c0f0b15d8e90a0",
    "Good200Mbps": "ami-0e4235abc903e0bd6",
    "Good25Mbps": "ami-0780977757edb376a",
    "Good5000Mbps": "ami-0bacf6f7c9975f527",
    "PerAppVeAwaf200Mbps": "ami-087d73d908fee5f36",
    "PerAppVeAwaf25Mbps": "ami-09531848f783b48d1",
    "PerAppVeLtm200Mbps": "ami-06bd3f764931c5ae0",
    "PerAppVeLtm25Mbps": "ami-02244ace8743fd2a0"
   },
   "me-south-1": {
    "AdvancedWaf1000Mbps": "ami-0fcb21fdfbf922d23",
    "AdvancedWaf16vCPU": "ami-04b004d8e4fe851c4",
    "AdvancedWaf200Mbps": "ami-0267cd7f890b013c3",
    "AdvancedWaf25Mbps": "ami-015529cce249b9abd",
    "AdvancedWaf8vCPU": "ami-0b64e07eeb8c7b9b9",
    "Best10000Mbps": "ami-0f4e8f83fb75ee1de",
    "Best1000Mbps": "ami-0d75fa4284dc7279f",
    "Best200Mbps": "ami-0576caa206d86edfa",
    "Best25Mbps": "ami-095369414b08bbf8d",
    "Best5000Mbps": "ami-06c34f70ab2e818d2",
    "Better10000Mbps": "ami-0dc025219efb1faf7",
    "Better1000Mbps": "ami-0829a6db0c7248964",
    "Better200Mbps": "ami-0a2653888c896431c",
    "Better25Mbps": "ami-0c6262d6ca2f3ce4e",
    "Better5000Mbps": "ami-0004de40da705f424",
    "Good10000Mbps": "ami-0118287ce2e22943c",
    "Good1000Mbps": "ami-09dba88feb13f3662",
    "Good16vCPU": "ami-07331929ebcb4e3ac",
    "Good200Mbps": "ami-08e1fc3a52c70604a",
    "Good25Mbps": "ami-0731d0dd347bc0841",
    "Good5000Mbps": "ami-07045be4488f80e6d",
    "PerAppVeAwaf200Mbps": "ami-02731b0784a80c2f8",
    "PerAppVeAwaf25Mbps": "ami-09ab3762459efac75",
    "PerAppVeLtm200Mbps": "ami-0f53ca3a92637aa2c",
    "PerAppVeLtm25Mbps": "ami-08a756e08f65fde45"
   },
   "sa-east-1": {
    "AdvancedWaf1000Mbps": "ami-0ac77800e287ed426",
    "AdvancedWaf16vCPU": "ami-08990c516bf25486c",
    "AdvancedWaf200Mbps": "ami-0d9b931e5540d3a8a",
    "AdvancedWaf25Mbps": "ami-0487516b6386f4c67",
    "AdvancedWaf8vCPU": "ami-08aeb160983f806a0",
    "Best10000Mbps": "ami-07a1979f20561f848",
    "Best1000Mbps": "ami-0eb1370b32d1c3dd4",
    "Best200Mbps": "ami-02b88b9224fdbd3ab",
    "Best25Mbps": "ami-07d1e81fff95c53eb",
    "Best5000Mbps": "ami-0ac377a277932675f",
    "Better10000Mbps": "ami-055f386e860dcbe7f",
    "Better1000Mbps": "ami-07afc5fce635ef13d",
    "Better200Mbps": "ami-0435e658540d19f8c",
    "Better25Mbps": "ami-06926446f5a05cd66",
    "Better5000Mbps": "ami-001e113378b6d6674",
    "Good10000Mbps": "ami-076ecc444420e5812",
    "Good1000Mbps": "ami-01936c3c0ae1a409b",
    "Good16vCPU": "ami-0aca7101861eeca3c",
    "Good200Mbps": "ami-01b848f6226c91be7",
    "Good25Mbps": "ami-05e9ad45062709a56",
    "Good5000Mbps": "ami-00dfd1fd16952bf7d",
    "PerAppVeAwaf200Mbps": "ami-05d67cac5481b8743",
    "PerAppVeAwaf25Mbps": "ami-0e1157de41d40e633",
    "PerAppVeLtm200Mbps": "ami-0ec75f6caed35d23e",
    "PerAppVeLtm25Mbps": "ami-01a5a75efc69daf37"
   },
   "us-east-1": {
    "AdvancedWaf1000Mbps": "ami-0872dfb40409f5945",
    "AdvancedWaf16vCPU": "ami-0a47fc5ec3fa20759",
    "AdvancedWaf200Mbps": "ami-0a6a9805334a0bc10",
    "AdvancedWaf25Mbps": "ami-0c387dd185aee40e8",
    "AdvancedWaf8vCPU": "ami-0c822a352b1e3cbab",
    "Best10000Mbps": "ami-06d3f50a99bcdb1f9",
    "Best1000Mbps": "ami-024c6b5b1d2029a72",
    "Best200Mbps": "ami-09ab5f5a0703d23ee",
    "Best25Mbps": "ami-0683a7625c726a0b1",
    "Best5000Mbps": "ami-05a238f849858b0fd",
    "Better10000Mbps": "ami-0c8165932e70e7f03",
    "Better1000Mbps": "ami-09aa008534e0fa42f",
    "Better200Mbps": "ami-0541b928267ab556d",
    "Better25Mbps": "ami-042c680793fd01bd3",
    "Better5000Mbps": "ami-00924deb567e685ea",
    "Good10000Mbps": "ami-0945062e838457840",
    "Good1000Mbps": "ami-003ca2847de43b1d6",
    "Good16vCPU": "ami-0e96c341cc94f9abe",
    "Good200Mbps": "ami-07cebf2fe5c2539c1",
    "Good25Mbps": "ami-052749e2b5082eced",
    "Good5000Mbps": "ami-031d00efcba17d41a",
    "PerAppVeAwaf200Mbps": "ami-095248207c018ae60",
    "PerAppVeAwaf25Mbps": "ami-0a75bfc6db0f4c305",
    "PerAppVeLtm200Mbps": "ami-02896a811829c5baf",
    "PerAppVeLtm25Mbps": "ami-0ed5214968e2d6e68"
   },
   "us-east-2": {
    "AdvancedWaf1000Mbps": "ami-0eae6c4d8f2a36358",
    "AdvancedWaf16vCPU": "ami-0a95a251d7c8df298",
    "AdvancedWaf200Mbps": "ami-01234e39c7cd2e1da",
    "AdvancedWaf25Mbps": "ami-0fe2221efc09eda9a",
    "AdvancedWaf8vCPU": "ami-08958e157cdf7e5d5",
    "Best10000Mbps": "ami-01cedd249790781a9",
    "Best1000Mbps": "ami-0c3b8e26ca3783e21",
    "Best200Mbps": "ami-0bc8ba8ceb5df75bb",
    "Best25Mbps": "ami-0aed55631c87b383b",
    "Best5000Mbps": "ami-0c3d0360427d64d37",
    "Better10000Mbps": "ami-0f18425b279f671f1",
    "Better1000Mbps": "ami-012ea4ebe80ade51a",
    "Better200Mbps": "ami-03a9cf6872203c976",
    "Better25Mbps": "ami-0855054f6a37e152c",
    "Better5000Mbps": "ami-00817f9a7b1a9c6de",
    "Good10000Mbps": "ami-0c8bb2368473bf9b2",
    "Good1000Mbps": "ami-0a9669ed303622c41",
    "Good16vCPU": "ami-05720237738c75327",
    "Good200Mbps": "ami-09ae0d36833d4f761",
    "Good25Mbps": "ami-0793c5045531d9eb6",
    "Good5000Mbps": "ami-017eb2937a5e04fdc",
    "PerAppVeAwaf200Mbps": "ami-0a4bc64348e7d35e3",
    "PerAppVeAwaf25Mbps": "ami-060eaed7b23684c51",
    "PerAppVeLtm200Mbps": "ami-0ccf22d1af4f6a1e9",
    "PerAppVeLtm25Mbps": "ami-0b23daec82a2fbbcc"
   },
   "us-gov-east-1": {
    "AdvancedWaf1000Mbps": "ami-097d6b2339fd8b997",
    "AdvancedWaf16vCPU": "ami-06b4c8508d1322904",
    "AdvancedWaf200Mbps": "ami-0bdfce5cf4db02433",
    "AdvancedWaf25Mbps": "ami-00f6c616ab175d71b",
    "AdvancedWaf8vCPU": "ami-04be4127e9bb5934c",
    "Best10000Mbps": "ami-0586ce9650372e0a4",
    "Best1000Mbps": "ami-0a5b886fe325d162f",
    "Best200Mbps": "ami-0db09a2ddd361b216",
    "Best25Mbps": "ami-0026fe5f90e1bc6bb",
    "Best5000Mbps": "ami-042042a0575f023db",
    "Better10000Mbps": "ami-0cfb2029042b68bda",
    "Better1000Mbps": "ami-0f637eb099bdf897a",
    "Better200Mbps": "ami-0eb4780455b49c116",
    "Better25Mbps": "ami-01a4175522be40acc",
    "Better5000Mbps": "ami-0c378b34e078a9985",
    "Good10000Mbps": "ami-023ffa88873c4caae",
    "Good1000Mbps": "ami-014e470f77925e7d4",
    "Good16vCPU": "ami-0228810bfd03ac2df",
    "Good200Mbps": "ami-07e2b663368df62b8",
    "Good25Mbps": "ami-0550fd51ff2da8b73",
    "Good5000Mbps": "ami-0866edd138a96ab10",
    "PerAppVeAwaf200Mbps": "ami-00da861b687d92889",
    "PerAppVeAwaf25Mbps": "ami-07f45ace479d02e50",
    "PerAppVeLtm200Mbps": "ami-0eaf18f33d580d041",
    "PerAppVeLtm25Mbps": "ami-07aae9b6722989364"
   },
   "us-gov-west-1": {
    "AdvancedWaf1000Mbps": "ami-07c52253e9598d612",
    "AdvancedWaf16vCPU": "ami-04c80c8e0ca7a48e8",
    "AdvancedWaf200Mbps": "ami-0b0579b649578c15d",
    "AdvancedWaf25Mbps": "ami-054d1b1bd43e01aed",
    "AdvancedWaf8vCPU": "ami-0b46a472613103043",
    "Best10000Mbps": "ami-0470ee4036b7b9fdc",
    "Best1000Mbps": "ami-0c66d8da66f1f87bf",
    "Best200Mbps": "ami-017607a2fc1669932",
    "Best25Mbps": "ami-0981a32342217b2b9",
    "Best5000Mbps": "ami-0dcf47a0d6956cb42",
    "Better10000Mbps": "ami-00a3b6c0402994055",
    "Better1000Mbps": "ami-0c27039c1f29ea9fc",
    "Better200Mbps": "ami-02fcdbca198ee2cd0",
    "Better25Mbps": "ami-0962606c86a88ef13",
    "Better5000Mbps": "ami-0e8b1bd54bdfbc5ad",
    "Good10000Mbps": "ami-00f9197a3eea7ba92",
    "Good1000Mbps": "ami-0ea1ffafc67bb08ba",
    "Good16vCPU": "ami-010b13ca294f54865",
    "Good200Mbps": "ami-0e7367f7984b5e25a",
    "Good25Mbps": "ami-0eac16dfaecf0cdeb",
    "Good5000Mbps": "ami-0ca896a59161ce764",
    "PerAppVeAwaf200Mbps": "ami-06a83ced61ebe1f54",
    "PerAppVeAwaf25Mbps": "ami-033d70bad9bc51725",
    "PerAppVeLtm200Mbps": "ami-0a135f5105655f446",
    "PerAppVeLtm25Mbps": "ami-036dbb0d4d0e805c4"
   },
   "us-west-1": {
    "AdvancedWaf1000Mbps": "ami-06108c004b6873c2d",
    "AdvancedWaf16vCPU": "ami-02f15c7a53384053e",
    "AdvancedWaf200Mbps": "ami-09126d34ae90a3539",
    "AdvancedWaf25Mbps": "ami-070d1fb829c8b81f6",
    "AdvancedWaf8vCPU": "ami-082ee2fb80a881198",
    "Best10000Mbps": "ami-0945c06a822c62cd0",
    "Best1000Mbps": "ami-0419ad93266d2afe2",
    "Best200Mbps": "ami-08c7d27d1ac021146",
    "Best25Mbps": "ami-0f8c6798cf6773d31",
    "Best5000Mbps": "ami-0f7978cb169e14820",
    "Better10000Mbps": "ami-09849d379cf1c1db9",
    "Better1000Mbps": "ami-0836c7dd92b265f46",
    "Better200Mbps": "ami-082049c8d26db20cd",
    "Better25Mbps": "ami-02c50a8de2d666a0e",
    "Better5000Mbps": "ami-045fae784ad561ff7",
    "Good10000Mbps": "ami-06ae208913cd38028",
    "Good1000Mbps": "ami-0a2167c5acbf82276",
    "Good16vCPU": "ami-05a7ba242c7c60fdf",
    "Good200Mbps": "ami-05bf04fdb5c1c0da6",
    "Good25Mbps": "ami-0128540b0dc27e6f2",
    "Good5000Mbps": "ami-0f0fdc8d1752e2942",
    "PerAppVeAwaf200Mbps": "ami-0e2a36e012cb3bff5",
    "PerAppVeAwaf25Mbps": "ami-017876396cdcf3ecc",
    "PerAppVeLtm200Mbps": "ami-0772a50366c05e06f",
    "PerAppVeLtm25Mbps": "ami-0f6a4ee4faf4ff920"
   },
   "us-west-2": {
    "AdvancedWaf1000Mbps": "ami-05060db3d2e6191d6",
    "AdvancedWaf16vCPU": "ami-0b7fc01ac3dce919d",
    "AdvancedWaf200Mbps": "ami-0a5db33dd418bc09f",
    "AdvancedWaf25Mbps": "ami-0868f1b56308705c5",
    "AdvancedWaf8vCPU": "ami-0338d69a09721ea0c",
    "Best10000Mbps": "ami-0ac78a5a47767fa3e",
    "Best1000Mbps": "ami-0cb75150bc8c97854",
    "Best200Mbps": "ami-038a5fce19fe63c5e",
    "Best25Mbps": "ami-055a0fb39729a5933",
    "Best5000Mbps": "ami-02e7b9878c9bf7d20",
    "Better10000Mbps": "ami-0f9d2dda5677e9e92",
    "Better1000Mbps": "ami-0dc9299816c6fc679",
    "Better200Mbps": "ami-07f7122c7937fdeda",
    "Better25Mbps": "ami-049a4456652f16ef1",
    "Better5000Mbps": "ami-008db34c28e149a55",
    "Good10000Mbps": "ami-0b2cb022978639601",
    "Good1000Mbps": "ami-0ae5740cb70f7927b",
    "Good16vCPU": "ami-04239ab842b040a07",
    "Good200Mbps": "ami-098ae6de4f1bdc6e9",
    "Good25Mbps": "ami-0df64642e87ced9b5",
    "Good5000Mbps": "ami-065d5a1cb82366dcc",
    "PerAppVeAwaf200Mbps": "ami-0c0cdc838baba4289",
    "PerAppVeAwaf25Mbps": "ami-02f76e93afbe2dfbe",
    "PerAppVeLtm200Mbps": "ami-072cf590aab02f9fe",
    "PerAppVeLtm25Mbps": "ami-049a782b40d8edc92"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
    "owner": {
     "default": "Owner"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    }
   }
  },
  "Version": "5.10.0"
 },
 "Outputs": {
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1subnet1Az1Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementInterface"
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1VipPrivateIp": {
   "Description": "VIP on External Interface Secondary IP 1",
   "Value": {
    "Fn::Select": [
     "0",
     {
      "Fn::GetAtt": [
       "Bigip1subnet1Az1Interface",
       "SecondaryPrivateIpAddresses"
      ]
     }
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1Interface"
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "Bigip2ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2subnet1Az2Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip2Instance"
   }
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementEipAddress"
   }
  },
  "Bigip2ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementInterface"
   }
  },
  "Bigip2ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip2Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip2subnet1Az2Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az2Interface"
   }
  },
  "Bigip2subnet1Az2SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az2SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "availabilityZone2": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "Good25Mbps",
    "Good200Mbps",
    "Good1000Mbps",
    "Good5000Mbps",
    "Good10000Mbps",
    "Good16vCPU",
    "Better25Mbps",
    "Better200Mbps",
    "Better1000Mbps",
    "Better5000Mbps",
    "Better10000Mbps",
    "Best25Mbps",
    "Best200Mbps",
    "Best1000Mbps",
    "Best5000Mbps",
    "Best10000Mbps",
    "AdvancedWaf25Mbps",
    "AdvancedWaf200Mbps",
    "AdvancedWaf1000Mbps",
    "AdvancedWaf8vCPU",
    "AdvancedWaf16vCPU"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best1000Mbps",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "m3.xlarge",
    "m3.medium",
    "m3.large",
    "m3.2xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c3.xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c3.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "managementSubnetAz2": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet1Az2": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "003-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user admin",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`; ",
           "MGMT_GATEWAY=`/config/cloud/aws/getManagementGateway.sh eth0`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "--user admin ",
           "--password-url file:///config/cloud/aws/.adminPassword ",
           "--password-encrypted ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--mgmt-route name:dns_route,gw:${MGMT_GATEWAY},network:${NAME_SERVER}/32 ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "--local-only ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:15.1.2-0.0.9,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-across-az-cluster-payg-2nic-bigip.template,templateVersion:5.10.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "HOSTNAME=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`;",
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--user admin",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--primary",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--create-group",
           "--device-group across_az_failover_group",
           "--sync-type sync-failover",
           "--network-failover",
           "--device ${HOSTNAME}",
           "--auto-sync",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-password.sh",
           "-o /var/log/cloud/aws/rm-password.log",
           "--log-level silly",
           "--wait-for CFE_CONFIG_DONE",
           "--signal PASSWORD_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip1subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "HOSTNAME=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
           "PEER_EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az2Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "VIPEIP='",
           {
            "Fn::If": [
             "usePublicIP",
             {
              "Ref": "Bigip1VipEipAddress"
             },
             {
              "Ref": "AWS::NoValue"
             }
            ]
           },
           "'\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getManagementGateway.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "GATEWAY_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`",
           "echo $GATEWAY"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.10.0\n",
           "hostname=`/usr/bin/curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='admin'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-password.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-password.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverAddresses\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"192.0.2.0\\/24\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.9.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.23.1/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm\"  \"/var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 564248d6b63f5e28d243749b6c3b4b3bd79534b8a2ec0b2ca2b90bf7c43c5132423874bd67d5b89ef9193ee489a736ff5df886980b976c984705f077682ee4c8\n            set hashes(f5-cloud-libs-aws.tar.gz) 24d0dbc3a2ec6a420da341998dae4cf64f9ba86ec8afded7da67031aa897b2a28ef1c77a2ab1ad270527bd6a15aad19642b0c97ccb9a48e58e7b35a1e920ca54\n            set hashes(f5-cloud-libs-azure.tar.gz) 477a6115490a31130c1ef145072fe38a826762d0d60485c122a323035223fd512ec05633c100a40df2c23e73e3511ff01ee811e49a3850f9cfabd62ca5519aa0\n            set hashes(f5-cloud-libs-gce.tar.gz) 7df8b89e16990110f301b5fac8feab65f45aae208a0dc6090a49c7f1e8b9e11aacecfed38407e428a66ab24e72f6c63ec1176bc6aaacc3f41dd7fdcd4a435801\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature OKwLECh84V/0vFzQ58ZdZUs3H8iczDMy8Z6gDlrwvtcI2Y99eygI+NItqSClR54+tiza/KZmjyC70ygHTokmwx36e99QWqA2/fFYvwnXeBy6sGsV3T+nGkq5oUpxQgKTYzMBA02BD0/WrpnrzNBlCAiTWcEBYtGMVraBKWrMB9owEvqQpWY8u1WSt1/+lP+ei4RYOpwiemFD5LM8O8qL4vC44WARuVYYWsuNrhWPyzfWF5KXrUSveOI5femmRbUXo9xwR8zU2v+nJdyKVb5gvtrh17tUTqR6Ju3B7plk+BLSxu1Da8lwLqrE9o7T8U2uwFljKg9kuS29p+eI3gHUUw==\n    signing-key /Common/f5-irule\n}\n",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.20.0/f5-appsvcs-3.20.0-3.noarch.rpm"
       },
       "/var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.6.1/f5-cloud-failover-1.6.1-1.noarch.rpm"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": "true",
       "VolumeSize": "100",
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip1ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip1subnet1Az1Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP1: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "f5_cloud_failover_vips",
      "Value": {
       "Fn::Join": [
        ",",
        [
         {
          "Fn::Select": [
           "0",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "SecondaryPrivateIpAddresses"
            ]
           }
          ]
         },
         {
          "Fn::Select": [
           "0",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "SecondaryPrivateIpAddresses"
            ]
           }
          ]
         }
        ]
       ]
      }
     }
    ]
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::Select": [
      "0",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "SecondaryPrivateIpAddresses"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": "1",
    "SubnetId": {
     "Ref": "subnet1Az1"
    },
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "f5_cloud_failover_nic_map",
      "Value": "external"
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2Instance": {
   "DependsOn": "Bigip1Instance",
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "003-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user admin",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`; ",
           "MGMT_GATEWAY=`/config/cloud/aws/getManagementGateway.sh eth0`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "--user admin ",
           "--password-url file:///config/cloud/aws/.adminPassword ",
           "--password-encrypted ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--mgmt-route name:dns_route,gw:${MGMT_GATEWAY},network:${NAME_SERVER}/32 ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "--local-only ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:15.1.2-0.0.9,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-across-az-cluster-payg-2nic-bigip.template,templateVersion:5.10.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--user admin",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--join-group",
           "--device-group across_az_failover_group",
           "--remote-host ",
           {
            "Fn::GetAtt": [
             "Bigip1ManagementInterface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-password.sh",
           "-o /var/log/cloud/aws/rm-password.log",
           "--log-level silly",
           "--wait-for CFE_CONFIG_DONE",
           "--signal PASSWORD_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az2Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "HOSTNAME=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getManagementGateway.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "GATEWAY_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`",
           "echo $GATEWAY"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.10.0\n",
           "hostname=`/usr/bin/curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='admin'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-password.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-password.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverAddresses\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"192.0.2.0\\/24\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.9.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.23.1/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm\"  \"/var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 564248d6b63f5e28d243749b6c3b4b3bd79534b8a2ec0b2ca2b90bf7c43c5132423874bd67d5b89ef9193ee489a736ff5df886980b976c984705f077682ee4c8\n            set hashes(f5-cloud-libs-aws.tar.gz) 24d0dbc3a2ec6a420da341998dae4cf64f9ba86ec8afded7da67031aa897b2a28ef1c77a2ab1ad270527bd6a15aad19642b0c97ccb9a48e58e7b35a1e920ca54\n            set hashes(f5-cloud-libs-azure.tar.gz) 477a6115490a31130c1ef145072fe38a826762d0d60485c122a323035223fd512ec05633c100a40df2c23e73e3511ff01ee811e49a3850f9cfabd62ca5519aa0\n            set hashes(f5-cloud-libs-gce.tar.gz) 7df8b89e16990110f301b5fac8feab65f45aae208a0dc6090a49c7f1e8b9e11aacecfed38407e428a66ab24e72f6c63ec1176bc6aaacc3f41dd7fdcd4a435801\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature OKwLECh84V/0vFzQ58ZdZUs3H8iczDMy8Z6gDlrwvtcI2Y99eygI+NItqSClR54+tiza/KZmjyC70ygHTokmwx36e99QWqA2/fFYvwnXeBy6sGsV3T+nGkq5oUpxQgKTYzMBA02BD0/WrpnrzNBlCAiTWcEBYtGMVraBKWrMB9owEvqQpWY8u1WSt1/+lP+ei4RYOpwiemFD5LM8O8qL4vC44WARuVYYWsuNrhWPyzfWF5KXrUSveOI5femmRbUXo9xwR8zU2v+nJdyKVb5gvtrh17tUTqR6Ju3B7plk+BLSxu1Da8lwLqrE9o7T8U2uwFljKg9kuS29p+eI3gHUUw==\n    signing-key /Common/f5-irule\n}\n",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/var/config/rest/downloads/f5-appsvcs-3.20.0-3.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.20.0/f5-appsvcs-3.20.0-3.noarch.rpm"
       },
       "/var/config/rest/downloads/f5-cloud-failover-1.6.1-1.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.6.1/f5-cloud-failover-1.6.1-1.noarch.rpm"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": "true",
       "VolumeSize": "100",
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip2ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip2subnet1Az2Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP2: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip2Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz2"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az2Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": "1",
    "SubnetId": {
     "Ref": "subnet1Az2"
    },
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "f5_cloud_failover_nic_map",
      "Value": "external"
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az2SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2subnet1Az2SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az2SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2subnet1Az2Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az2Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "S3Bucket": {
   "Properties": {
    "AccessControl": "BucketOwnerFullControl",
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::S3::Bucket"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": "80",
      "IpProtocol": "tcp",
      "ToPort": "80"
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": "22",
      "IpProtocol": "tcp",
      "ToPort": "22"
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipSecurityGroupIngressConfigSync": {
   "Properties": {
    "FromPort": "4353",
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": "4353"
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressHa": {
   "Properties": {
    "FromPort": "1026",
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "udp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": "1026"
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressManagmentAcross": {
   "Properties": {
    "FromPort": "443",
    "GroupId": {
     "Ref": "bigipManagementSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": "443"
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:ReplaceRoute",
          "ec2:assignprivateipaddresses",
          "sts:AssumeRole",
          "s3:ListAllMyBuckets",
          "ec2:UnassignPrivateIpAddresses"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        },
        {
         "Action": [
          "s3:ListBucket",
          "s3:GetBucketTagging"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            }
           ]
          ]
         }
        },
        {
         "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "ec2:CreateRoute",
          "ec2:ReplaceRoute"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:ec2:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":route-table/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
